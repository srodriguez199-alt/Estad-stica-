# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12DyTgzzCRkjVDh7fhwdm-qdUmAPvXPTy
"""



#punto 1
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 170
# Desviación estándar poblacional
desviacion_estandar_poblacional = 10
# Tamaño de la muestra
n = 50
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional conocida,
# se utiliza la distribución normal (Z).
# Se busca el valor Z crítico para un nivel de confianza del 95%.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor Z crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución normal estándar.
valor_z_critico = st.norm.ppf(1 - alpha/2)

# El margen de error se calcula como: Z_critico * (desviacion_estandar_poblacional / sqrt(n))
margen_error = valor_z_critico * (desviacion_estandar_poblacional / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la altura promedio poblacional es:")
print(f"[{intervalo_confianza_inferior:.2f} cm, {intervalo_confianza_superior:.2f} cm]")

# 4. Visualizar el intervalo de confianza (opcional, una representación simple)
# Aunque no es una gráfica de distribución en este caso, podemos mostrar el intervalo.
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Altura (cm)")
plt.title("Intervalo de Confianza del 95% para la Altura Promedio Poblacional")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 2
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 75
# Desviación estándar poblacional
desviacion_estandar_poblacional = 15
# Tamaño de la muestra
n = 100
# Nivel de confianza (90%)
nivel_confianza = 0.90
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional conocida,
# se utiliza la distribución normal (Z).
# Se busca el valor Z crítico para un nivel de confianza del 90%.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor Z crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución normal estándar.
valor_z_critico = st.norm.ppf(1 - alpha/2)

# El margen de error se calcula como: Z_critico * (desviacion_estandar_poblacional / sqrt(n))
margen_error = valor_z_critico * (desviacion_estandar_poblacional / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la calificación promedio poblacional es:")
print(f"[{intervalo_confianza_inferior:.2f} puntos, {intervalo_confianza_superior:.2f} puntos]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Calificación (puntos)")
plt.title("Intervalo de Confianza del 90% para la Calificación Promedio Poblacional")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 3
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 2.5
# Desviación estándar poblacional
desviacion_estandar_poblacional = 0.2
# Tamaño de la muestra
n = 30
# Nivel de confianza (99%)
nivel_confianza = 0.99
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional conocida,
# se utiliza la distribución normal (Z).
# Se busca el valor Z crítico para un nivel de confianza del 99%.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor Z crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución normal estándar.
valor_z_critico = st.norm.ppf(1 - alpha/2)

# El margen de error se calcula como: Z_critico * (desviacion_estandar_poblacional / sqrt(n))
margen_error = valor_z_critico * (desviacion_estandar_poblacional / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para el diámetro promedio real es:")
print(f"[{intervalo_confianza_inferior:.3f} cm, {intervalo_confianza_superior:.3f} cm]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Diámetro (cm)")
plt.title("Intervalo de Confianza del 99% para el Diámetro Promedio Real")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 4
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 12
# Desviación estándar poblacional
desviacion_estandar_poblacional = 1.5
# Tamaño de la muestra
n = 25
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional conocida,
# se utiliza la distribución normal (Z).
# Se busca el valor Z crítico para un nivel de confianza del 95%.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor Z crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución normal estándar.
valor_z_critico = st.norm.ppf(1 - alpha/2)

# El margen de error se calcula como: Z_critico * (desviacion_estandar_poblacional / sqrt(n))
margen_error = valor_z_critico * (desviacion_estandar_poblacional / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la duración media poblacional es:")
print(f"[{intervalo_confianza_inferior:.2f} horas, {intervalo_confianza_superior:.2f} horas]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Duración (horas)")
plt.title("Intervalo de Confianza del 95% para la Duración Media Poblacional")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 5
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 20
# Desviación estándar poblacional
desviacion_estandar_poblacional = 4
# Tamaño de la muestra
n = 40
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional conocida,
# se utiliza la distribución normal (Z).
# Se busca el valor Z crítico para un nivel de confianza del 95%.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor Z crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución normal estándar.
valor_z_critico = st.norm.ppf(1 - alpha/2)

# El margen de error se calcula como: Z_critico * (desviacion_estandar_poblacional / sqrt(n))
margen_error = valor_z_critico * (desviacion_estandar_poblacional / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para el crecimiento promedio poblacional es:")
print(f"[{intervalo_confianza_inferior:.2f} cm, {intervalo_confianza_superior:.2f} cm]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Crecimiento (cm)")
plt.title("Intervalo de Confianza del 95% para el Crecimiento Promedio Poblacional")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 6
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 84
# Desviación estándar muestral
desviacion_estandar_muestral = 5
# Tamaño de la muestra
n = 12
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza
# Grados de libertad
grados_libertad = n - 1

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional desconocida,
# se utiliza la distribución t de Student.
# Se busca el valor t crítico para un nivel de confianza del 95% y n-1 grados de libertad.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor t crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución t de Student.
valor_t_critico = st.t.ppf(1 - alpha/2, grados_libertad)

# El margen de error se calcula como: t_critico * (desviacion_estandar_muestral / sqrt(n))
margen_error = valor_t_critico * (desviacion_estandar_muestral / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la temperatura media poblacional del café es:")
print(f"[{intervalo_confianza_inferior:.2f}°C, {intervalo_confianza_superior:.2f}°C]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Temperatura (°C)")
plt.title("Intervalo de Confianza del 95% para la Temperatura Media Poblacional del Café")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 7
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 8
# Desviación estándar muestral
desviacion_estandar_muestral = 1.2
# Tamaño de la muestra
n = 15
# Nivel de confianza (90%)
nivel_confianza = 0.90
# Nivel de significancia alpha
alpha = 1 - nivel_confianza
# Grados de libertad
grados_libertad = n - 1

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional desconocida,
# se utiliza la distribución t de Student.
# Se busca el valor t crítico para un nivel de confianza del 90% y n-1 grados de libertad.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor t crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución t de Student.
valor_t_critico = st.t.ppf(1 - alpha/2, grados_libertad)

# El margen de error se calcula como: t_critico * (desviacion_estandar_muestral / sqrt(n))
margen_error = valor_t_critico * (desviacion_estandar_muestral / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la duración media real de la batería es:")
print(f"[{intervalo_confianza_inferior:.2f} horas, {intervalo_confianza_superior:.2f} horas]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Duración (horas)")
plt.title("Intervalo de Confianza del 90% para la Duración Media Real de la Batería")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 8
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 25
# Desviación estándar muestral
desviacion_estandar_muestral = 3
# Tamaño de la muestra
n = 10
# Nivel de confianza (99%)
nivel_confianza = 0.99
# Nivel de significancia alpha
alpha = 1 - nivel_confianza
# Grados de libertad
grados_libertad = n - 1

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional desconocida,
# se utiliza la distribución t de Student.
# Se busca el valor t crítico para un nivel de confianza del 99% y n-1 grados de libertad.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor t crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución t de Student.
valor_t_critico = st.t.ppf(1 - alpha/2, grados_libertad)

# El margen de error se calcula como: t_critico * (desviacion_estandar_muestral / sqrt(n))
margen_error = valor_t_critico * (desviacion_estandar_muestral / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para la altura media poblacional de las plántulas es:")
print(f"[{intervalo_confianza_inferior:.2f} cm, {intervalo_confianza_superior:.2f} cm]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Altura (cm)")
plt.title("Intervalo de Confianza del 99% para la Altura Media Poblacional de las Plántulas")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 9
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 30
# Desviación estándar muestral
desviacion_estandar_muestral = 4
# Tamaño de la muestra
n = 20
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza
# Grados de libertad
grados_libertad = n - 1

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional desconocida,
# se utiliza la distribución t de Student.
# Se busca el valor t crítico para un nivel de confianza del 95% y n-1 grados de libertad.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor t crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución t de Student.
valor_t_critico = st.t.ppf(1 - alpha/2, grados_libertad)

# El margen de error se calcula como: t_critico * (desviacion_estandar_muestral / sqrt(n))
margen_error = valor_t_critico * (desviacion_estandar_muestral / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para el tiempo medio poblacional de entrega es:")
print(f"[{intervalo_confianza_inferior:.2f} minutos, {intervalo_confianza_superior:.2f} minutos]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Tiempo (minutos)")
plt.title("Intervalo de Confianza del 95% para el Tiempo Medio Poblacional de Entrega")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 10
import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir el problema y los datos
# Media muestral
media_muestral = 1.5
# Desviación estándar muestral
desviacion_estandar_muestral = 0.3
# Tamaño de la muestra
n = 8
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza
# Grados de libertad
grados_libertad = n - 1

# 2. Calcular el intervalo de confianza
# Para un intervalo de confianza de la media poblacional con desviación estándar poblacional desconocida,
# se utiliza la distribución t de Student.
# Se busca el valor t crítico para un nivel de confianza del 95% y n-1 grados de libertad.
# Como es un intervalo bilateral, alpha se divide en dos colas (alpha/2).
# El valor t crítico se obtiene buscando el percentil 1 - alpha/2 en la distribución t de Student.
valor_t_critico = st.t.ppf(1 - alpha/2, grados_libertad)

# El margen de error se calcula como: t_critico * (desviacion_estandar_muestral / sqrt(n))
margen_error = valor_t_critico * (desviacion_estandar_muestral / np.sqrt(n))

# El intervalo de confianza es: [media_muestral - margen_error, media_muestral + margen_error]
intervalo_confianza_inferior = media_muestral - margen_error
intervalo_confianza_superior = media_muestral + margen_error

# 3. Interpretar el intervalo de confianza
print(f"El intervalo de confianza del {nivel_confianza*100}% para el peso medio poblacional de los libros de matemáticas es:")
print(f"[{intervalo_confianza_inferior:.2f} kg, {intervalo_confianza_superior:.2f} kg]")

# 4. Visualizar el intervalo de confianza
plt.figure(figsize=(8, 2))
plt.errorbar(media_muestral, 1, xerr=margen_error, fmt='o', color='blue', capsize=5, label=f'{nivel_confianza*100}% Intervalo de Confianza')
plt.plot(media_muestral, 1, 'ro', markersize=8, label='Media Muestral')
plt.yticks([]) # Ocultar eje y
plt.xlabel("Peso (kg)")
plt.title("Intervalo de Confianza del 95% para el Peso Medio Poblacional de los Libros de Matemáticas")
plt.legend()
plt.grid(axis='x')
plt.show()

# 5. Documentar y comentar - Ya realizado en el código

# 6. Finalizar la tarea - La impresión del intervalo y la gráfica resumen los resultados.

#punto 11
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.03  # 3%
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 95%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Escenario 1: Se tiene un estudio piloto con una proporción muestral (p_hat)
proporcion_muestral = 0.72  # 72%
q_hat = 1 - proporcion_muestral

# Fórmula para el tamaño de muestra para una proporción con conocimiento previo:
# n = (Z^2 * p_hat * q_hat) / E^2
tamano_muestra_piloto = (valor_z_critico**2 * proporcion_muestral * q_hat) / (margen_error**2)

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra_piloto = np.ceil(tamano_muestra_piloto)

print(f"Escenario 1: Con estudio piloto (proporción muestral = {proporcion_muestral*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_piloto)}")

# Escenario 2: No se tiene estudio piloto (se asume p_hat = 0.5 para maximizar n)
proporcion_estimada_conservadora = 0.5
q_estimada_conservadora = 1 - proporcion_estimada_conservadora

# Fórmula para el tamaño de muestra para una proporción sin conocimiento previo:
# n = (Z^2 * 0.25) / E^2   (ya que p_hat * q_hat es máximo cuando p_hat = 0.5, y 0.5 * 0.5 = 0.25)
tamano_muestra_sin_piloto = (valor_z_critico**2 * 0.25) / (margen_error**2)

# Redondear hacia arriba
tamano_muestra_sin_piloto = np.ceil(tamano_muestra_sin_piloto)

print(f"\nEscenario 2: Sin estudio piloto (proporción estimada = {proporcion_estimada_conservadora*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_sin_piloto)}")

# Interpretación
print("\nInterpretación:")
print(f"- En el Escenario 1, con la información del estudio piloto, se necesita una muestra de aproximadamente {int(tamano_muestra_piloto)} residentes.")
print(f"- En el Escenario 2, al no tener información previa, se utiliza una estimación conservadora (p=0.5) que resulta en un tamaño de muestra mayor, aproximadamente {int(tamano_muestra_sin_piloto)} residentes. Esto asegura que el margen de error no exceda el 3% para cualquier proporción real.")

#punto 12
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.04  # 4%
# Nivel de confianza (90%)
nivel_confianza = 0.90
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 90%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Proporción histórica de devoluciones (p_hat)
proporcion_historica = 0.07
q_historica = 1 - proporcion_historica

# Fórmula para el tamaño de muestra para una proporción con conocimiento previo:
# n = (Z^2 * p_hat * q_hat) / E^2
tamano_muestra = (valor_z_critico**2 * proporcion_historica * q_historica) / (margen_error**2)

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una proporción histórica de devoluciones del {proporcion_historica*100}%, un margen de error del {margen_error*100}% y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar la proporción de devoluciones con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} pedidos.")
print("- Este tamaño de muestra garantiza que, con un 90% de confianza, el margen de error de la estimación de la proporción de devoluciones no exceda el 4%.")

#punto 13
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.02  # 2%
# Nivel de confianza (99%)
nivel_confianza = 0.99
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 99%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Escenario 1: Se tiene una encuesta previa con una proporción muestral (p_hat)
proporcion_encuesta_previa = 0.42  # 42%
q_hat_previa = 1 - proporcion_encuesta_previa

# Fórmula para el tamaño de muestra para una proporción con conocimiento previo:
# n = (Z^2 * p_hat * q_hat) / E^2
tamano_muestra_previa = (valor_z_critico**2 * proporcion_encuesta_previa * q_hat_previa) / (margen_error**2)

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra_previa = np.ceil(tamano_muestra_previa)

print(f"Escenario 1: Con encuesta previa (proporción muestral = {proporcion_encuesta_previa*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_previa)}")

# Escenario 2: No se tiene encuesta previa (se asume p_hat = 0.5 para maximizar n)
proporcion_estimada_conservadora = 0.5
q_estimada_conservadora = 1 - proporcion_estimada_conservadora

# Fórmula para el tamaño de muestra para una proporción sin conocimiento previo:
# n = (Z^2 * 0.25) / E^2   (ya que p_hat * q_hat es máximo cuando p_hat = 0.5, y 0.5 * 0.5 = 0.25)
tamano_muestra_sin_previa = (valor_z_critico**2 * 0.25) / (margen_error**2)

# Redondear hacia arriba
tamano_muestra_sin_previa = np.ceil(tamano_muestra_sin_previa)

print(f"\nEscenario 2: Sin encuesta previa (proporción estimada = {proporcion_estimada_conservadora*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_sin_previa)}")

# Interpretación
print("\nInterpretación:")
print(f"- En el Escenario 1, utilizando la información de la encuesta previa, se necesita una muestra de aproximadamente {int(tamano_muestra_previa)} votantes.")
print(f"- En el Escenario 2, al no tener información previa, se utiliza una estimación conservadora (p=0.5) que resulta en un tamaño de muestra mayor, aproximadamente {int(tamano_muestra_sin_previa)} votantes. Esto asegura que el margen de error no exceda el 2% para cualquier proporción real con un 99% de confianza.")

#punto 14
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.05  # 5%
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 95%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Con datos preliminares (encuesta informal)
proporcion_encuesta_informal = 0.56  # 56%
q_hat_informal = 1 - proporcion_encuesta_informal

# Fórmula para el tamaño de muestra para una proporción con conocimiento previo:
# n = (Z^2 * p_hat * q_hat) / E^2
tamano_muestra_informal = (valor_z_critico**2 * proporcion_encuesta_informal * q_hat_informal) / (margen_error**2)

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra_informal = np.ceil(tamano_muestra_informal)

print(f"Con datos preliminares (encuesta informal = {proporcion_encuesta_informal*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_informal)}")

# Sin datos preliminares (se asume p_hat = 0.5 para maximizar n)
proporcion_estimada_conservadora = 0.5
q_estimada_conservadora = 1 - proporcion_estimada_conservadora

# Fórmula para el tamaño de muestra para una proporción sin conocimiento previo:
# n = (Z^2 * 0.25) / E^2   (ya que p_hat * q_hat es máximo cuando p_hat = 0.5, y 0.5 * 0.5 = 0.25)
tamano_muestra_sin_datos = (valor_z_critico**2 * 0.25) / (margen_error**2)

# Redondear hacia arriba
tamano_muestra_sin_datos = np.ceil(tamano_muestra_sin_datos)

print(f"\nSin datos preliminares (proporción estimada = {proporcion_estimada_conservadora*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_sin_datos)}")

# Interpretación
print("\nInterpretación:")
print(f"- Utilizando la información de la encuesta informal, se necesita una muestra de aproximadamente {int(tamano_muestra_informal)} padres.")
print(f"- Si no se tuvieran datos preliminares, se necesitaría una muestra mayor, aproximadamente {int(tamano_muestra_sin_datos)} padres, para garantizar el margen de error deseado.")

#punto 15
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.04  # 4%
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 95%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Escenario 1: Con prueba preliminar con una proporción muestral (p_hat)
proporcion_preliminar = 0.69  # 69%
q_hat_preliminar = 1 - proporcion_preliminar

# Fórmula para el tamaño de muestra para una proporción con conocimiento previo:
# n = (Z^2 * p_hat * q_hat) / E^2
tamano_muestra_preliminar = (valor_z_critico**2 * proporcion_preliminar * q_hat_preliminar) / (margen_error**2)

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra_preliminar = np.ceil(tamano_muestra_preliminar)

print(f"Escenario 1: Con prueba preliminar (proporción muestral = {proporcion_preliminar*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_preliminar)}")

# Escenario 2: Conservador (se asume p_hat = 0.5 para maximizar n)
proporcion_estimada_conservadora = 0.5
q_estimada_conservadora = 1 - proporcion_estimada_conservadora

# Fórmula para el tamaño de muestra para una proporción sin conocimiento previo (conservador):
# n = (Z^2 * 0.25) / E^2   (ya que p_hat * q_hat es máximo cuando p_hat = 0.5, y 0.5 * 0.5 = 0.25)
tamano_muestra_conservador = (valor_z_critico**2 * 0.25) / (margen_error**2)

# Redondear hacia arriba
tamano_muestra_conservador = np.ceil(tamano_muestra_conservador)

print(f"\nEscenario 2: Conservador (proporción estimada = {proporcion_estimada_conservadora*100}%)")
print(f"Tamaño de muestra necesario: {int(tamano_muestra_conservador)}")

# Interpretación
print("\nInterpretación:")
print(f"- En el Escenario 1, utilizando la información de la prueba preliminar, se necesita una muestra de aproximadamente {int(tamano_muestra_preliminar)} pacientes.")
print(f"- En el Escenario 2, al ser conservador y no tener información previa (o querer el tamaño máximo), se utiliza una estimación de p=0.5 que resulta en un tamaño de muestra mayor, aproximadamente {int(tamano_muestra_conservador)} pacientes. Esto asegura que el margen de error no exceda el 4% para cualquier proporción real con un 95% de confianza.")

#punto 16
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 2  # minutos
# Desviación estándar poblacional (sigma)
desviacion_estandar_poblacional = 8 # minutos
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 95%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Fórmula para el tamaño de muestra para una media con desviación estándar poblacional conocida:
# n = (Z * sigma / E)^2
tamano_muestra = ((valor_z_critico * desviacion_estandar_poblacional) / margen_error)**2

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una desviación estándar poblacional de {desviacion_estandar_poblacional} minutos, un margen de error de {margen_error} minutos y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar el tiempo promedio de espera en urgencias con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} pacientes.")
print("- Este tamaño de muestra garantiza que, con un 95% de confianza, el margen de error de la estimación del tiempo promedio de espera no exceda los 2 minutos.")

#punto 17
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 10  # kWh
# Desviación estándar poblacional (sigma)
desviacion_estandar_poblacional = 50 # kWh
# Nivel de confianza (90%)
nivel_confianza = 0.90
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 90%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Fórmula para el tamaño de muestra para una media con desviación estándar poblacional conocida:
# n = (Z * sigma / E)^2
tamano_muestra = ((valor_z_critico * desviacion_estandar_poblacional) / margen_error)**2

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una desviación estándar poblacional de {desviacion_estandar_poblacional} kWh, un margen de error de {margen_error} kWh y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar el consumo mensual promedio de los clientes residenciales con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} clientes.")
print("- Este tamaño de muestra garantiza que, con un 90% de confianza, el margen de error de la estimación del consumo promedio no exceda los 10 kWh.")

#punto 18
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 0.5  # kg
# Desviación estándar poblacional (sigma)
desviacion_estandar_poblacional = 1.2  # kg
# Nivel de confianza (99%)
nivel_confianza = 0.99
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 99%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Fórmula para el tamaño de muestra para una media con desviación estándar poblacional conocida:
# n = (Z * sigma / E)^2
tamano_muestra = ((valor_z_critico * desviacion_estandar_poblacional) / margen_error)**2

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una desviación estándar poblacional de {desviacion_estandar_poblacional} kg, un margen de error de {margen_error} kg y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar el peso promedio de los paquetes con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} paquetes.")
print("- Este tamaño de muestra garantiza que, con un 99% de confianza, el margen de error de la estimación del peso promedio no exceda los 0.5 kg.")

#punto 19
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 1.5  # minutos
# Desviación estándar poblacional (sigma)
desviacion_estandar_poblacional = 5 # minutos
# Nivel de confianza (95%)
nivel_confianza = 0.95
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 95%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Fórmula para el tamaño de muestra para una media con desviación estándar poblacional conocida:
# n = (Z * sigma / E)^2
tamano_muestra = ((valor_z_critico * desviacion_estandar_poblacional) / margen_error)**2

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una desviación estándar poblacional de {desviacion_estandar_poblacional} minutos, un margen de error de {margen_error} minutos y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar la duración promedio de las reuniones con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} reuniones.")
print("- Este tamaño de muestra garantiza que, con un 95% de confianza, el margen de error de la estimación de la duración promedio no exceda los 1.5 minutos.")

#punto 20
import numpy as np
import scipy.stats as st

# 1. Definir el problema y los datos
# Margen de error deseado (E)
margen_error = 3  # puntos
# Desviación estándar poblacional (sigma)
desviacion_estandar_poblacional = 12 # puntos
# Nivel de confianza (90%)
nivel_confianza = 0.90
# Nivel de significancia alpha
alpha = 1 - nivel_confianza

# Valor Z crítico para un nivel de confianza del 90%
valor_z_critico = st.norm.ppf(1 - alpha/2)

# Fórmula para el tamaño de muestra para una media con desviación estándar poblacional conocida:
# n = (Z * sigma / E)**2
tamano_muestra = ((valor_z_critico * desviacion_estandar_poblacional) / margen_error)**2

# Redondear hacia arriba para asegurar el margen de error deseado
tamano_muestra = np.ceil(tamano_muestra)

print(f"Con una desviación estándar poblacional de {desviacion_estandar_poblacional} puntos, un margen de error de {margen_error} puntos y un nivel de confianza del {nivel_confianza*100}%:")
print(f"Tamaño de muestra necesario: {int(tamano_muestra)}")

# Interpretación
print("\nInterpretación:")
print(f"- Para estimar el puntaje promedio del examen estandarizado con los parámetros dados, se necesita una muestra de aproximadamente {int(tamano_muestra)} estudiantes.")
print("- Este tamaño de muestra garantiza que, con un 90% de confianza, el margen de error de la estimación del puntaje promedio no exceda los 3 puntos.")

"""**Justificación para usar p = 0.5 si no hay datos preliminares:**

La fórmula para calcular el tamaño de muestra para una proporción es:

$n = \frac{Z^2 \cdot p \cdot (1-p)}{E^2}$

Donde:
- $n$ es el tamaño de muestra.
- $Z$ es el valor crítico de la distribución normal estándar asociado al nivel de confianza.
- $p$ es la proporción poblacional (desconocida).
- $E$ es el margen de error deseado.

El producto $p \cdot (1-p)$ aparece en la fórmula. Queremos encontrar el valor de $p$ que maximiza este producto, para así obtener el tamaño de muestra más grande posible que garantice el margen de error deseado, sin importar cuál sea la proporción real en la población.

Consideremos la función $f(p) = p(1-p) = p - p^2$. Para encontrar el máximo, podemos tomar la derivada con respecto a $p$ e igualarla a cero:

$f'(p) = 1 - 2p$

$1 - 2p = 0 \implies 2p = 1 \implies p = 0.5$

El máximo del producto $p(1-p)$ ocurre cuando $p = 0.5$. En este caso, $p(1-p) = 0.5 \cdot (1-0.5) = 0.5 \cdot 0.5 = 0.25$.

Al usar $p = 0.5$ cuando no se tiene información preliminar sobre la proporción poblacional, estamos utilizando el valor que nos dará el tamaño de muestra más grande posible para un margen de error y nivel de confianza dados. Esto se conoce como un enfoque conservador, ya que nos asegura que el tamaño de muestra calculado será suficiente para lograr la precisión deseada, incluso en el peor escenario posible (cuando la variabilidad de la proporción es máxima).

En resumen, se utiliza $p = 0.5$ para maximizar el producto $p(1-p)$ y, por lo tanto, obtener un tamaño de muestra conservador que garantice el margen de error deseado sin importar la proporción real de la población.

# Task
Resuelva los problemas de estadística inferencial proporcionados en un cuaderno de Google Colab usando Python, siguiendo los procedimientos especificados para pruebas de hipótesis, intervalos de confianza y tamaños de muestra. Utilice `scipy.stats` para cálculos estadísticos y `matplotlib` para graficar, comentando todo el código y documentando las respuestas.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para el peso promedio de los paquetes de cereal.

**Reasoning**:
Define and print the null and alternative hypotheses for the mean weight of cereal packages based on the problem statement.
"""

#punto 21 - Hipótesis para el peso promedio de los paquetes de cereal

# Definir las hipótesis
# Problema: Se afirma que el peso neto promedio de los paquetes de cereal es de 350 gramos.
# Una muestra de 25 paquetes tiene una media de 348 gramos y una desviación estándar de 8 gramos.
# Queremos probar si hay evidencia de que el peso promedio real es menor a 350 gramos.

# Hipótesis Nula (H0): El peso promedio poblacional de los paquetes de cereal es igual a 350 gramos.
# μ = 350 gramos
hipotesis_nula = "H0: μ = 350 gramos (El peso promedio poblacional es igual a 350 gramos)"

# Hipótesis Alternativa (H1): El peso promedio poblacional de los paquetes de cereal es menor a 350 gramos.
# μ < 350 gramos
hipotesis_alternativa = "H1: μ < 350 gramos (El peso promedio poblacional es menor a 350 gramos)"

# Imprimir las hipótesis
print("Hipótesis para el peso promedio de los paquetes de cereal:")
print(hipotesis_nula)
print(hipotesis_alternativa)

"""## Establecer el nivel de significancia

### Subtask:
Identificar el valor de alpha (α) dado en el problema.

**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average weight of cereal packages, store it in a variable, and print it.
"""

#punto 21 - Identificar el valor de alpha (α)

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha}")

"""## Identificar el estadístico de prueba y su distribución

### Subtask:
Determinar qué estadístico de prueba es apropiado para este escenario (prueba Z para la media con desviación estándar poblacional conocida) y su distribución.

**Reasoning**:
Based on the problem description in the previous cells, the population standard deviation is unknown and the sample size is 25, which is less than 30. Therefore, the appropriate statistical test is the t-test and its distribution is the Student's t-distribution. I will print the name of the test and its distribution.
"""

#punto 21 - Determinar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar de la muestra (8 gramos) y el tamaño de la muestra (n=25).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba}")
print(f"La distribución asociada es: {distribucion_asociada}")

"""## Determinar el valor crítico y la región de rechazo

### Subtask:
Calcular el valor crítico de t para el nivel de significancia y los grados de libertad, y definir la región de rechazo para esta prueba de hipótesis unilateral izquierda.

**Reasoning**:
Calculate the degrees of freedom, find the critical t-value for the unilateral left test, define the rejection region, and print the results as requested by the subtask.
"""

#punto 21 - Calcular el valor crítico de t y definir la región de rechazo

# 1. Calcular los grados de libertad (df)
# n = 25 (tamaño de la muestra)
n = 25
grados_libertad = n - 1

# 3. Calcular el valor crítico de t
# alpha = 0.05 (nivel de significancia)
# Para una prueba unilateral izquierda, el valor crítico de t se busca en el percentil alpha.
valor_t_critico = st.t.ppf(alpha, grados_libertad)

# 4. Definir la región de rechazo
# La región de rechazo para una prueba unilateral izquierda es cuando el estadístico de prueba es menor o igual al valor crítico de t.
region_rechazo = f"Región de Rechazo: t <= {valor_t_critico:.3f}"

# 5. Imprimir el valor crítico de t y la descripción de la región de rechazo
print(f"Grados de libertad (df): {grados_libertad}")
print(f"Valor crítico de t para alpha = {alpha} (unilateral izquierda): {valor_t_critico:.3f}")
print(region_rechazo)

"""## Calcular el estadístico de prueba

### Subtask:
Calcular el valor del estadístico t utilizando la media muestral, la media poblacional hipotetizada, la desviación estándar muestral y el tamaño de la muestra.

**Reasoning**:
Define the variables and calculate the t-statistic based on the provided formula.
"""

# punto 21 - Calcular el estadístico de prueba t

# 1. Definir las variables con los valores proporcionados
# Media muestral de los paquetes de cereal
media_muestral = 348
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0 = 350
# Desviación estándar muestral
desviacion_estandar_muestral = 8
# Tamaño de la muestra
n = 25

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t = (media_muestral - media_poblacional_h0) / (desviacion_estandar_muestral / np.sqrt(n))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral}")
print(f"Tamaño de la muestra (n): {n}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t:.3f}")

"""## Calcular el valor p

### Subtask:
Determinar el valor p asociado al estadístico de prueba calculado.

**Reasoning**:
Calculate the p-value for the left-tailed t-test using the calculated t-statistic and the degrees of freedom.
"""

#punto 21 - Determinar el valor p

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba unilateral izquierda, el valor p es P(T <= estadistico_t | H0 es verdadera)
valor_p = st.t.cdf(estadistico_t, grados_libertad)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t:.3f}")
print(f"Valor p (unilateral izquierda): {valor_p:.4f}")

"""## Graficar la distribución y la región de rechazo

### Subtask:
Visualizar la distribución t de Student, indicando el valor crítico, la región de rechazo y la posición del estadístico de prueba calculado.

**Reasoning**:
Generate the plot for the t-distribution, critical value, rejection region, and test statistic to visualize the results of the hypothesis test.
"""

# punto 21 - Visualizar la distribución t de Student

# 1. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad)
pdf = st.t.pdf(x, grados_libertad)

# 3. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x, pdf, label=f'Distribución t (df={grados_libertad})')

# 5. Agregar una línea vertical en el valor crítico de t
plt.axvline(valor_t_critico, color='red', linestyle='--', label=f'Valor Crítico t = {valor_t_critico:.3f}')

# 6. Rellenar la región de rechazo (unilateral izquierda)
# La región de rechazo es donde x <= valor_t_critico
x_rechazo = np.linspace(-4, valor_t_critico, 100)
pdf_rechazo = st.t.pdf(x_rechazo, grados_libertad)
plt.fill_between(x_rechazo, pdf_rechazo, color='red', alpha=0.3, label='Región de Rechazo (α = 0.05)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Región de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""## Tomar una decisión estadística y concluir

### Subtask:
Comparar el estadístico de prueba con el valor crítico (o el valor p con alpha) y tomar una decisión sobre si rechazar o no la hipótesis nula. Luego, interpretar la decisión en el contexto práctico del problema.

**Reasoning**:
Compare the t-statistic with the critical value and the p-value with alpha, then print the decision and interpretation.
"""

# punto 21 - Comparar el estadístico de prueba y el valor p con el valor crítico y alpha

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba t: estadistico_t
# Valor crítico de t: valor_t_critico
print(f"Estadístico de prueba t ({estadistico_t:.3f}) vs Valor crítico t ({valor_t_critico:.3f})")

if estadistico_t <= valor_t_critico:
    decision_estadistica_critico = "Rechazar H0"
else:
    decision_estadistica_critico = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p
# Alpha: alpha
print(f"\nValor p ({valor_p:.4f}) vs Alpha ({alpha:.2f})")

if valor_p <= alpha:
    decision_estadistica_pvalue = "Rechazar H0"
else:
    decision_estadistica_pvalue = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p:.4f}) es menor o igual que el nivel de significancia alpha ({alpha:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el peso promedio poblacional de los paquetes de cereal es menor a 350 gramos.")
else:
    print(f"Dado que el valor p ({valor_p:.4f}) es mayor que el nivel de significancia alpha ({alpha:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el peso promedio poblacional de los paquetes de cereal es menor a 350 gramos.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el peso promedio es 350 gramos.")

"""## Summary:

### Data Analysis Key Findings

*   The null hypothesis (\(H_0\)) states that the average weight of cereal packages is 350 grams (\(\mu = 350\)), while the alternative hypothesis (\(H_1\)) states that the average weight is less than 350 grams (\(\mu < 350\)).
*   The significance level (\(\alpha\)) for the test is set at 0.05.
*   Given that the population standard deviation is unknown and the sample size (\(n=25\)) is less than 30, the appropriate test statistic is the t-statistic, following a Student's t-distribution with \(n-1 = 24\) degrees of freedom.
*   For a left-tailed test with \(\alpha = 0.05\) and 24 degrees of freedom, the critical t-value is approximately -1.711. The rejection region is \(t \le -1.711\).
*   Using the sample mean (348 g), hypothesized population mean (350 g), sample standard deviation (8 g), and sample size (25), the calculated t-statistic is approximately -1.250.
*   The p-value associated with the t-statistic of -1.250 for a left-tailed test with 24 degrees of freedom is approximately 0.1117.
*   Comparing the t-statistic (-1.250) to the critical value (-1.711), the t-statistic is not in the rejection region (-1.250 > -1.711).
*   Comparing the p-value (0.1117) to \(\alpha\) (0.05), the p-value is greater than \(\alpha\) (0.1117 > 0.05).
*   Based on both comparisons, the statistical decision is to not reject the null hypothesis (\(H_0\)).

### Insights or Next Steps

*   There is no statistically significant evidence at the 5% level to conclude that the average weight of the cereal packages is less than 350 grams.
*   Further investigation with a larger sample size might be warranted if there is a strong practical concern about the average weight being below 350 grams.

# Task
Resuelva los siguientes problemas de estadística inferencial en un cuaderno de Google Colab usando Python, siguiendo el procedimiento para pruebas de hipótesis, intervalos de confianza y tamaños de muestra especificado en el mensaje inicial. Utilice `scipy.stats` para cálculos estadísticos y p-valores, y `matplotlib` para graficar. Comente todo el código y documente las respuestas con texto interpretativo.

**Problemas:**

1.  **Intervalo de Confianza para la Media (σ conocida):**
    *   Estimar la altura promedio de estudiantes universitarios. Muestra: n=50, media=170 cm, σ=10 cm. Construir un intervalo de confianza del 95 %.
    *   Estimar la calificación promedio de un examen nacional. Muestra: n=100, media=75 puntos, σ=15 puntos. Determinar un intervalo de confianza del 90 %.
    *   Calcular un intervalo de confianza del 99 % para el diámetro promedio real de tornillos. Muestra: n=30, media=2.5 cm, σ=0.2 cm.
    *   Encontrar un intervalo de confianza del 95 % para la duración media poblacional de baterías. Muestra: n=25, media=12 horas, σ=1.5 horas.
    *   Construir un intervalo de confianza del 95 % para el crecimiento promedio de plantas con fertilizante. Muestra: n=40, media=20 cm, σ=4 cm.

2.  **Intervalo de Confianza para la Media (σ desconocida - Prueba t):**
    *   Calcular el intervalo de confianza del 95 % para la temperatura media poblacional del café. Muestra: n=12, media=84°C, s=5°C.
    *   Determinar el intervalo de confianza del 90 % para la duración media real de la batería de un smartphone. Muestra: n=15, media=8 horas, s=1.2 horas.
    *   Construir el intervalo de confianza del 99 % para la altura media poblacional de plántulas de maíz. Muestra: n=10, media=25 cm, s=3 cm.
    *   Estimar el intervalo de confianza del 95 % para el tiempo medio de entrega de pizza. Muestra: n=20, media=30 minutos, s=4 minutos.
    *   Calcular el intervalo de confianza del 95 % para el peso medio poblacional de libros de matemáticas. Muestra: n=8, media=1.5 kg, s=0.3 kg.

3.  **Tamaño de Muestra para Proporciones:**
    *   Estimar la proporción de residentes vacunados contra la influenza con un margen de error del 3 % y un nivel de confianza del 95 %. Estudio piloto: 72 % vacunados. Comparar con el tamaño requerido sin estudio piloto.
    *   Calcular el tamaño de muestra necesario para estimar la proporción de devoluciones de un producto con un margen de error del 4 % y un nivel de confianza del 90 %. Datos históricos: 7 % devoluciones.
    *   Determinar el tamaño de muestra necesario para estimar la proporción de votantes que apoyan a un candidato con un margen de error del 2 % y un nivel de confianza del 99 %. Encuesta previa: 42 % apoyo. Analizar el cambio sin encuesta previa.
    *   Calcular el tamaño de muestra requerido para estimar la proporción de apoyo a una nueva política con un margen de error del 5 % y confianza del 95 %. Encuesta informal: 56 % de acuerdo. Justificar el uso de p=0.5 sin datos preliminares.
    *   Determinar el tamaño de muestra necesario para estimar la proporción de pacientes que mejoran con un tratamiento con un margen de error del 4 % y confianza del 95 %. Prueba preliminar: 69 % mejoría. Comparar con el tamaño usando p=0.5.

4.  **Tamaño de Muestra para Medias (σ conocida):**
    *   Calcular el tamaño de muestra necesario para estimar el tiempo promedio de espera en urgencias con un margen de error de 2 minutos y un nivel de confianza del 95 %. σ = 8 minutos.
    *   Determinar el tamaño de muestra requerido para el consumo mensual promedio de clientes residenciales con un margen de error de 10 kWh y un nivel de confianza del 90 %. σ = 50 kWh.
    *   Calcular el tamaño de muestra necesario para el peso promedio de paquetes con un margen de error de 0.5 kg y un nivel de confianza del 99 %. σ = 1.2 kg.
    *   Calcular el tamaño de muestra para la duración promedio de reuniones con un margen de error de 1.5 minutos y un nivel de confianza del 95 %. σ = 5 minutos.
    *   Determinar el tamaño de muestra necesario para el puntaje promedio de un examen estandarizado con un margen de error de 3 puntos y un nivel de confianza del 90 %. σ = 12.

5.  **Prueba de Hipótesis para la Media (σ conocida - Prueba Z):**
    *   Probar si el peso promedio de paquetes de cereal es menor a 500 g. Muestra: n=40, media=495 g, σ=15 g. Nivel de significancia α = 0.05. Plantear hipótesis, calcular Z, determinar región crítica/rechazo, concluir.
    *   Probar si la duración promedio de baterías es menor a 1200 horas. Muestra: n=50, media=1180 horas, σ=100 horas. Nivel de significancia α = 0.01. Plantear hipótesis, calcular Z, determinar región crítica/rechazo, concluir.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para la duración promedio de las baterías.

**Reasoning**:
Define and print the null and alternative hypotheses for the average battery life based on the problem statement.
"""

#punto 22 - Hipótesis para la duración promedio de las baterías

# Definir las hipótesis
# Problema: Se afirma que la duración promedio de las baterías es de 1200 horas.
# Queremos probar si la duración promedio real es menor a 1200 horas.

# Hipótesis Nula (H0): La duración promedio poblacional de las baterías es igual a 1200 horas.
# μ = 1200 horas
hipotesis_nula = "H0: μ = 1200 horas (La duración promedio poblacional es igual a 1200 horas)"

# Hipótesis Alternativa (H1): La duración promedio poblacional de las baterías es menor a 1200 horas.
# μ < 1200 horas
hipotesis_alternativa = "H1: μ < 1200 horas (La duración promedio poblacional es menor a 1200 horas)"

# Imprimir las hipótesis
print("Hipótesis para la duración promedio de las baterías:")
print(hipotesis_nula)
print(hipotesis_alternativa)

"""**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average battery life, store it in a variable, and print it.


"""

#punto 22 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 1%.
alpha = 0.01

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average battery life, given that the population standard deviation is known.


"""

#punto 22 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar poblacional (σ = 100 horas) y el tamaño de la muestra (n=50).
# Cuando la desviación estándar poblacional es conocida, el estadístico de prueba apropiado para probar la media poblacional es el estadístico Z.
estadistico_prueba = "Estadístico Z (Z-score)"

# La distribución asociada con el estadístico Z es la distribución normal estándar.
distribucion_asociada = "Distribución Normal Estándar (Z)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba}")
print(f"La distribución asociada es: {distribucion_asociada}")

"""**Reasoning**:
Calculate the critical Z-value for the unilateral left test and define the rejection region based on the significance level.


"""

#punto 22 - Determinar el valor crítico Z y la región de rechazo

# 1. Obtener el valor crítico Z
# alpha = 0.01 (nivel de significancia)
# Para una prueba unilateral izquierda, el valor crítico Z se busca en el percentil alpha.
valor_z_critico = st.norm.ppf(alpha)

# 2. Definir la región de rechazo
# La región de rechazo para una prueba unilateral izquierda es cuando el estadístico de prueba es menor o igual al valor crítico Z.
region_rechazo = f"Región de Rechazo: Z <= {valor_z_critico:.3f}"

# 3. Imprimir el valor crítico Z y la descripción de la región de rechazo
print(f"Valor crítico Z para alpha = {alpha} (unilateral izquierda): {valor_z_critico:.3f}")
print(region_rechazo)

"""**Reasoning**:
Calculate the Z-statistic using the sample mean, hypothesized population mean, population standard deviation, and sample size.


"""

# punto 22 - Calcular el estadístico de prueba Z

# 1. Definir las variables con los valores proporcionados
# Media muestral de la duración de las baterías
media_muestral = 1180
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0 = 1200
# Desviación estándar poblacional
desviacion_estandar_poblacional = 100
# Tamaño de la muestra
n = 50

# 2. Calcular el valor del estadístico Z
# Fórmula: Z = (media muestral - media poblacional hipotetizada) / (desviación estándar poblacional / sqrt(n))
estadistico_z = (media_muestral - media_poblacional_h0) / (desviacion_estandar_poblacional / np.sqrt(n))

# 3. Imprimir el valor calculado del estadístico de prueba Z
print(f"Media muestral: {media_muestral}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0}")
print(f"Desviación estándar poblacional: {desviacion_estandar_poblacional}")
print(f"Tamaño de la muestra (n): {n}")
print(f"\nEl valor del estadístico de prueba Z es: {estadistico_z:.3f}")

"""**Reasoning**:
Determine the p-value associated with the calculated Z-statistic for a left-tailed test.


"""

#punto 22 - Determinar el valor p

# Utilizar la función scipy.stats.norm.cdf() para calcular el valor p.
# Para una prueba unilateral izquierda, el valor p es P(Z <= estadistico_z | H0 es verdadera)
valor_p = st.norm.cdf(estadistico_z)

# Imprimir el estadístico Z y el valor p
print(f"Estadístico de prueba Z: {estadistico_z:.3f}")
print(f"Valor p (unilateral izquierda): {valor_p:.4f}")

"""**Reasoning**:
Visualize the standard normal distribution, indicating the critical Z-value, the rejection region, and the position of the calculated Z-statistic.


"""

# punto 22 - Visualizar la distribución normal estándar

# 1. Crear un rango de valores para el eje x (valores Z)
x = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF) de la distribución normal estándar
pdf = st.norm.pdf(x)

# 3. Crear la gráfica de la distribución normal estándar
plt.figure(figsize=(10, 6))
plt.plot(x, pdf, label='Distribución Normal Estándar')

# 5. Agregar una línea vertical en el valor crítico Z
plt.axvline(valor_z_critico, color='red', linestyle='--', label=f'Valor Crítico Z = {valor_z_critico:.3f}')

# 6. Rellenar la región de rechazo (unilateral izquierda)
# La región de rechazo es donde x <= valor_z_critico
x_rechazo = np.linspace(-4, valor_z_critico, 100)
pdf_rechazo = st.norm.pdf(x_rechazo)
plt.fill_between(x_rechazo, pdf_rechazo, color='red', alpha=0.3, label='Región de Rechazo (α = 0.01)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_z, color='green', linestyle='-', label=f'Estadístico de Prueba Z = {estadistico_z:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor Z")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Normal Estándar, Región de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""**Reasoning**:
Compare the calculated Z-statistic with the critical Z-value (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average battery life.


"""

# punto 22 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba Z: estadistico_z
# Valor crítico Z: valor_z_critico
print(f"Estadístico de prueba Z ({estadistico_z:.3f}) vs Valor crítico Z ({valor_z_critico:.3f})")

if estadistico_z <= valor_z_critico:
    decision_estadistica_critico = "Rechazar H0"
else:
    decision_estadistica_critico = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p
# Alpha: alpha
print(f"\nValor p ({valor_p:.4f}) vs Alpha ({alpha:.2f})")

if valor_p <= alpha:
    decision_estadistica_pvalue = "Rechazar H0"
else:
    decision_estadistica_pvalue = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p:.4f}) es menor o igual que el nivel de significancia alpha ({alpha:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que la duración promedio poblacional de las baterías es menor a 1200 horas.")
else:
    print(f"Dado que el valor p ({valor_p:.4f}) es mayor que el nivel de significancia alpha ({alpha:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que la duración promedio poblacional de las baterías es menor a 1200 horas.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que la duración promedio es 1200 horas.")

"""## Summary:

### Data Analysis Key Findings

*   Based on the sample data (n=50, mean=1180 hours, σ=100 hours), the calculated Z-statistic for testing if the average battery life is less than 1200 hours is approximately -1.414.
*   For a significance level of α = 0.01, the critical Z-value for this left-tailed test is approximately -2.326.
*   The calculated Z-statistic (-1.414) is greater than the critical Z-value (-2.326), falling outside the rejection region.
*   The p-value associated with a Z-statistic of -1.414 in a left-tailed test is approximately 0.0786.
*   Since the p-value (0.0786) is greater than the significance level (0.01), there is not enough statistically significant evidence to reject the null hypothesis.

### Insights or Next Steps

*   The sample provides some indication that the average battery life might be less than 1200 hours (sample mean of 1180), but the evidence is not strong enough at the 1% significance level to definitively conclude this for the entire population.
*   If a higher significance level (e.g., 5% or 10%) were used, the conclusion might change. Future studies could consider a larger sample size or a less stringent alpha level depending on the practical implications of a shorter battery life.

# Task
Resuelva los siguientes problemas de estadística inferencial en un cuaderno de Google Colab usando Python, siguiendo el procedimiento para pruebas de hipótesis, intervalos de confianza y tamaños de muestra especificado en el mensaje inicial. Utilice `scipy.stats` para cálculos estadísticos y p-valores, y `matplotlib` para graficar. Comente todo el código y documente las respuestas con texto interpretativo.

**Problemas:**

1.  **Intervalo de Confianza para la Media (σ conocida):**
    *   Estimar la altura promedio de estudiantes universitarios. Muestra: n=50, media=170 cm, σ=10 cm. Nivel de confianza: 95 %.
    *   Estimar la calificación promedio de un examen nacional. Muestra: n=100, media=75 puntos, σ=15 puntos. Nivel de confianza: 90 %.
    *   Estimar el diámetro promedio de tornillos. Muestra: n=30, media=2.5 cm, σ=0.2 cm. Nivel de confianza: 99 %.
    *   Estimar la duración promedio de baterías. Muestra: n=25, media=12 horas, σ=1.5 horas. Nivel de confianza: 95 %.
    *   Estimar el crecimiento promedio de plantas con fertilizante. Muestra: n=40, media=20 cm, σ=4 cm. Nivel de confianza: 95 %.

2.  **Intervalo de Confianza para la Media (σ desconocida):**
    *   Estimar la temperatura promedio del café. Muestra: n=12, media=84°C, s=5°C. Nivel de confianza: 95 %.
    *   Estimar la duración promedio de la batería de un smartphone. Muestra: n=15, media=8 horas, s=1.2 horas. Nivel de confianza: 90 %.
    *   Estimar la altura promedio de plántulas de maíz. Muestra: n=10, media=25 cm, s=3 cm. Nivel de confianza: 99 %.
    *   Estimar el tiempo promedio de entrega de pizza. Muestra: n=20, media=30 minutos, s=4 minutos. Nivel de confianza: 95 %.
    *   Estimar el peso promedio de libros de matemáticas. Muestra: n=8, media=1.5 kg, s=0.3 kg. Nivel de confianza: 95 %.

3.  **Tamaño de Muestra para la Proporción:**
    *   Estimar la proporción de residentes vacunados. Margen de error: 3 %, Nivel de confianza: 95 %.
        *   Con estudio piloto: p̂ = 0.72.
        *   Sin estudio piloto.
    *   Estimar la proporción de devoluciones de un producto. Margen de error: 4 %, Nivel de confianza: 90 %. Datos históricos: p = 0.07.
    *   Estimar la proporción de votantes que apoyan a un candidato. Margen de error: 2 %, Nivel de confianza: 99 %.
        *   Con encuesta previa: p̂ = 0.42.
        *   Sin encuesta previa.
    *   Medir el apoyo a una nueva política escolar. Margen de error: 5 %, Nivel de confianza: 95 %. Encuesta informal: p̂ = 0.56. Justificar el uso de p=0.5 sin datos preliminares.
    *   Estimar la proporción de pacientes que mejoran con un tratamiento. Margen de error: 4 %, Nivel de confianza: 95 %.
        *   Con prueba preliminar: p̂ = 0.69.
        *   Siendo conservador (p=0.5).

4.  **Tamaño de Muestra para la Media:**
    *   Estimar el tiempo promedio de espera en urgencias. Margen de error: 2 minutos, Nivel de confianza: 95 %, σ = 8 minutos.
    *   Analizar el consumo mensual promedio de clientes residenciales. Margen de error: 10 kWh, Nivel de confianza: 90 %, σ = 50 kWh.
    *   Estimar el peso promedio de paquetes transportados. Margen de error: 0.5 kg, Nivel de confianza: 99 %, σ = 1.2 kg.
    *   Estimar la duración promedio de reuniones. Margen de error: 1.5 minutos, Nivel de confianza: 95 %, σ = 5 minutos.
    *   Estimar el puntaje promedio de un examen estandarizado. Margen de error: 3 puntos, Nivel de confianza: 90 %, σ = 12.

5.  **Prueba de Hipótesis para la Media (σ conocida):**
    *   Peso promedio de paquetes de cereal. Afirmación: μ = 500 g. Sospecha: μ < 500 g. Muestra: n=40, media=495 g, σ=15 g. Nivel de significancia: α = 0.05.
    *   Duración promedio de baterías. Afirmación: μ = 1200 horas. Cliente alega: μ < 1200 horas. Muestra: n=50, media=1180 horas, σ = 100 horas. Nivel de significancia: α = 0.01.
    *   Promedio de clase en examen nacional. Afirmación: μ ≠ 75 puntos. Muestra: n=36, media=78 puntos, σ = 12. Nivel de significancia: α = 0.05.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para el promedio de la clase en el examen nacional.

**Reasoning**:
Define and print the null and alternative hypotheses for the average class score on the national exam based on the problem statement.
"""

#punto 23 - Hipótesis para el promedio de la clase en el examen nacional

# Definir las hipótesis
# Problema: Se afirma que el promedio de la clase en un examen nacional es diferente a 75 puntos.
# Queremos probar esta afirmación.

# Hipótesis Nula (H0): El promedio poblacional de la clase en el examen nacional es igual a 75 puntos.
# μ = 75 puntos
hipotesis_nula = "H0: μ = 75 puntos (El promedio poblacional de la clase es igual a 75 puntos)"

# Hipótesis Alternativa (H1): El promedio poblacional de la clase en el examen nacional es diferente a 75 puntos.
# μ ≠ 75 puntos
hipotesis_alternativa = "H1: μ ≠ 75 puntos (El promedio poblacional de la clase es diferente a 75 puntos)"

# Imprimir las hipótesis
print("Hipótesis para el promedio de la clase en el examen nacional:")
print(hipotesis_nula)
print(hipotesis_alternativa)

"""**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average class score, store it in a variable, and print it.


"""

#punto 23 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average class score, given that the population standard deviation is known and the sample size is large.


"""

#punto 23 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar poblacional (σ = 12) y el tamaño de la muestra (n=36).
# Como la desviación estándar poblacional es conocida y el tamaño de la muestra es >= 30, el estadístico de prueba apropiado para probar la media poblacional es el estadístico Z.
estadistico_prueba = "Estadístico Z (Z-score)"

# La distribución asociada con el estadístico Z es la distribución normal estándar.
distribucion_asociada = "Distribución Normal Estándar (Z)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba}")
print(f"La distribución asociada es: {distribucion_asociada}")

"""**Reasoning**:
Calculate the critical Z-values for the two-tailed test and define the rejection regions based on the significance level.


"""

#punto 23 - Determinar los valores críticos Z y la región de rechazo

# 1. Obtener los valores críticos Z
# alpha = 0.05 (nivel de significancia)
# Para una prueba bilateral (dos colas), alpha se divide en dos: alpha/2.
# Los valores críticos Z se buscan en los percentiles alpha/2 y 1 - alpha/2.
alpha_dos_colas = alpha / 2
valor_z_critico_inferior = st.norm.ppf(alpha_dos_colas)
valor_z_critico_superior = st.norm.ppf(1 - alpha_dos_colas)

# 2. Definir la región de rechazo
# La región de rechazo para una prueba bilateral es cuando el estadístico de prueba es menor o igual al valor crítico Z inferior O mayor o igual al valor crítico Z superior.
region_rechazo = f"Región de Rechazo: Z <= {valor_z_critico_inferior:.3f} o Z >= {valor_z_critico_superior:.3f}"

# 3. Imprimir los valores críticos Z y la descripción de la región de rechazo
print(f"Valor crítico Z inferior para alpha/2 = {alpha_dos_colas}: {valor_z_critico_inferior:.3f}")
print(f"Valor crítico Z superior para 1 - alpha/2 = {1 - alpha_dos_colas}: {valor_z_critico_superior:.3f}")
print(region_rechazo)

"""**Reasoning**:
Calculate the Z-statistic using the sample mean, hypothesized population mean, population standard deviation, and sample size.


"""

# punto 23 - Calcular el estadístico de prueba Z

# 1. Definir las variables con los valores proporcionados
# Media muestral del puntaje de la clase
media_muestral = 78
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0 = 75
# Desviación estándar poblacional
desviacion_estandar_poblacional = 12
# Tamaño de la muestra
n = 36

# 2. Calcular el valor del estadístico Z
# Fórmula: Z = (media muestral - media poblacional hipotetizada) / (desviación estándar poblacional / sqrt(n))
estadistico_z = (media_muestral - media_poblacional_h0) / (desviacion_estandar_poblacional / np.sqrt(n))

# 3. Imprimir el valor calculado del estadístico de prueba Z
print(f"Media muestral: {media_muestral}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0}")
print(f"Desviación estándar poblacional: {desviacion_estandar_poblacional}")
print(f"Tamaño de la muestra (n): {n}")
print(f"\nEl valor del estadístico de prueba Z es: {estadistico_z:.3f}")

"""**Reasoning**:
Determine the p-value associated with the calculated Z-statistic for a two-tailed test.


"""

#punto 23 - Determinar el valor p

# Utilizar la función scipy.stats.norm.cdf() para calcular el valor p.
# Para una prueba bilateral, el valor p es 2 * P(Z >= |estadistico_z| | H0 es verdadera)
# o 2 * P(Z <= -|estadistico_z| | H0 es verdadera)
# Como nuestro estadístico Z es positivo, calculamos 1 - cdf(estadistico_z) para la cola derecha
# y multiplicamos por 2 para ambas colas.
valor_p = 2 * (1 - st.norm.cdf(abs(estadistico_z)))

# Imprimir el estadístico Z y el valor p
print(f"Estadístico de prueba Z: {estadistico_z:.3f}")
print(f"Valor p (bilateral): {valor_p:.4f}")

"""**Reasoning**:
Visualize the standard normal distribution, indicating the critical Z-values, the rejection regions, and the position of the calculated Z-statistic.


"""

# punto 23 - Visualizar la distribución normal estándar

# 1. Crear un rango de valores para el eje x (valores Z)
x = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF) de la distribución normal estándar
pdf = st.norm.pdf(x)

# 3. Crear la gráfica de la distribución normal estándar
plt.figure(figsize=(10, 6))
plt.plot(x, pdf, label='Distribución Normal Estándar')

# 5. Agregar líneas verticales en los valores críticos Z
plt.axvline(valor_z_critico_inferior, color='red', linestyle='--', label=f'Valores Críticos Z = {valor_z_critico_inferior:.3f}, {valor_z_critico_superior:.3f}')
plt.axvline(valor_z_critico_superior, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_z_critico_inferior
x_rechazo_izquierda = np.linspace(-4, valor_z_critico_inferior, 100)
pdf_rechazo_izquierda = st.norm.pdf(x_rechazo_izquierda)
plt.fill_between(x_rechazo_izquierda, pdf_rechazo_izquierda, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.05)')

# La región de rechazo derecha es donde x >= valor_z_critico_superior
x_rechazo_derecha = np.linspace(valor_z_critico_superior, 4, 100)
pdf_rechazo_derecha = st.norm.pdf(x_rechazo_derecha)
plt.fill_between(x_rechazo_derecha, pdf_rechazo_derecha, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_z, color='green', linestyle='-', label=f'Estadístico de Prueba Z = {estadistico_z:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor Z")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Normal Estándar, Regiones de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""**Reasoning**:
Compare the calculated Z-statistic with the critical Z-values (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average class score on the national exam.


"""

# punto 23 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con los valores críticos
# Estadístico de prueba Z: estadistico_z
# Valores críticos Z: valor_z_critico_inferior, valor_z_critico_superior
print(f"Estadístico de prueba Z ({estadistico_z:.3f}) vs Valores críticos Z ({valor_z_critico_inferior:.3f}, {valor_z_critico_superior:.3f})")

if estadistico_z <= valor_z_critico_inferior or estadistico_z >= valor_z_critico_superior:
    decision_estadistica_critico = "Rechazar H0"
else:
    decision_estadistica_critico = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p
# Alpha: alpha
print(f"\nValor p ({valor_p:.4f}) vs Alpha ({alpha:.2f})")

if valor_p <= alpha:
    decision_estadistica_pvalue = "Rechazar H0"
else:
    decision_estadistica_pvalue = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p:.4f}) es menor o igual que el nivel de significancia alpha ({alpha:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el promedio poblacional de la clase en el examen nacional es diferente a 75 puntos.")
else:
    print(f"Dado que el valor p ({valor_p:.4f}) es mayor que el nivel de significancia alpha ({alpha:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el promedio poblacional de la clase en el examen nacional es diferente a 75 puntos.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el promedio es 75 puntos.")

"""## Summary:

### Data Analysis Key Findings

*   The calculated Z-statistic for the hypothesis test is 1.500.
*   The critical Z-values for a two-tailed test with $\alpha = 0.05$ are -1.960 and 1.960.
*   The p-value for the test is 0.1336.
*   The calculated Z-statistic (1.500) does not fall within the rejection region (Z $\le$ -1.960 or Z $\ge$ 1.960).
*   The p-value (0.1336) is greater than the significance level ($\alpha = 0.05$).

### Insights or Next Steps

*   Based on the sample data and a significance level of 5%, there is insufficient evidence to conclude that the average class score on the national exam is different from 75 points.
*   Further investigation with a larger sample size might be considered if there is a strong belief that the true average score is indeed different from 75 points, as increasing the sample size can increase the power of the test to detect a difference.

# Task
Resuelva los siguientes problemas de estadística inferencial (intervalos de confianza, tamaños de muestra y pruebas de hipótesis) en un cuaderno de Google Colab usando Python, siguiendo los procedimientos y formatos especificados en el mensaje inicial. Utilice las librerías `scipy.stats` y `matplotlib` según corresponda, comente el código y documente las respuestas.

**Problemas:**

1.  **Intervalo de Confianza para la Media (σ conocida):** Estimar la altura promedio de estudiantes universitarios. Muestra: n=50, media=170 cm, σ=10 cm. Nivel de confianza: 95 %.
2.  **Intervalo de Confianza para la Media (σ conocida):** Estimar la calificación promedio de un examen nacional. Muestra: n=100, media=75 puntos, σ=15 puntos. Nivel de confianza: 90 %.
3.  **Intervalo de Confianza para la Media (σ conocida):** Estimar el diámetro promedio de tornillos. Muestra: n=30, media=2.5 cm, σ=0.2 cm. Nivel de confianza: 99 %.
4.  **Intervalo de Confianza para la Media (σ conocida):** Estimar la duración promedio de baterías. Muestra: n=25, media=12 horas, σ=1.5 horas. Nivel de confianza: 95 %.
5.  **Intervalo de Confianza para la Media (σ conocida):** Estimar el crecimiento promedio de plantas con fertilizante. Muestra: n=40, media=20 cm, σ=4 cm. Nivel de confianza: 95 %.
6.  **Intervalo de Confianza para la Media (σ desconocida):** Estimar la temperatura promedio del café. Muestra: n=12, media=84°C, s=5°C. Nivel de confianza: 95 %.
7.  **Intervalo de Confianza para la Media (σ desconocida):** Estimar la duración promedio de la batería de un smartphone. Muestra: n=15, media=8 horas, s=1.2 horas. Nivel de confianza: 90 %.
8.  **Intervalo de Confianza para la Media (σ desconocida):** Estimar la altura promedio de plántulas de maíz. Muestra: n=10, media=25 cm, s=3 cm. Nivel de confianza: 99 %.
9.  **Intervalo de Confianza para la Media (σ desconocida):** Estimar el tiempo promedio de entrega de pizza. Muestra: n=20, media=30 minutos, s=4 minutos. Nivel de confianza: 95 %.
10. **Intervalo de Confianza para la Media (σ desconocida):** Estimar el peso promedio de libros de matemáticas. Muestra: n=8, media=1.5 kg, s=0.3 kg. Nivel de confianza: 95 %.
11. **Tamaño de Muestra para Proporción:** Estimar la proporción de residentes vacunados. Margen de error: 3 %, Nivel de confianza: 95 %. Considerar caso con estudio piloto (p=0.72) y sin estudio piloto.
12. **Tamaño de Muestra para Proporción:** Estimar la tasa de devoluciones de un producto. Datos históricos: p=0.07. Margen de error: 4 %, Nivel de confianza: 90 %.
13. **Tamaño de Muestra para Proporción:** Estimar la proporción de votantes que apoyan a un candidato. Encuesta previa: p=0.42. Margen de error: 2 %, Nivel de confianza: 99 %. Considerar caso con encuesta previa y sin ella.
14. **Tamaño de Muestra para Proporción:** Medir el apoyo a una nueva política. Encuesta informal: p=0.56. Margen de error: 5 %, Nivel de confianza: 95 %. Justificar uso de p=0.5 sin datos preliminares.
15. **Tamaño de Muestra para Proporción:** Estimar la proporción de pacientes que mejoran con un tratamiento. Prueba preliminar: p=0.69. Margen de error: 4 %, Nivel de confianza: 95 %. Considerar caso conservador (p=0.5).
16. **Tamaño de Muestra para Media (σ conocida):** Estimar el tiempo promedio de espera en urgencias. σ=8 minutos. Margen de error: 2 minutos, Nivel de confianza: 95 %.
17. **Tamaño de Muestra para Media (σ conocida):** Analizar el consumo mensual promedio de clientes residenciales. σ=50 kWh. Margen de error: 10 kWh, Nivel de confianza: 90 %.
18. **Tamaño de Muestra para Media (σ conocida):** Estimar el peso promedio de paquetes. σ=1.2 kg. Margen de error: 0.5 kg, Nivel de confianza: 99 %.
19. **Tamaño de Muestra para Media (σ conocida):** Estimar la duración promedio de reuniones. σ=5 minutos. Margen de error: 1.5 minutos, Nivel de confianza: 95 %.
20. **Tamaño de Muestra para Media (σ conocida):** Estudiar el puntaje promedio de un examen estandarizado. σ=12. Margen de error: 3 puntos, Nivel de confianza: 90 %.
21. **Prueba de Hipótesis para la Media (σ conocida):** Probar si el peso promedio de paquetes de cereal es menor a 500 g. H0: μ=500, H1: μ<500. Muestra: n=40, media=495 g, σ=15 g. α=0.05.
22. **Prueba de Hipótesis para la Media (σ conocida):** Probar si la duración promedio de baterías es menor a 1200 horas. H0: μ=1200, H1: μ<1200. Muestra: n=50, media=1180 horas, σ=100 horas. α=0.01.
23. **Prueba de Hipótesis para la Media (σ conocida):** Probar si el promedio de clase en un examen es diferente al promedio nacional. H0: μ=75, H1: μ≠75. Muestra: n=36, media=78, σ=12. α=0.05.
24. **Prueba de Hipótesis para la Media (σ conocida):** Probar si la reducción promedio de presión arterial con un medicamento es 10 mmHg. H0: μ=10, H1: μ<10. Muestra: n=25, media=8 mmHg, σ=3 mmHg. α=0.05.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para la reducción promedio de la presión arterial.

**Reasoning**:
Define and print the null and alternative hypotheses for the average reduction in blood pressure based on the problem statement.
"""

#punto 24 - Hipótesis para la reducción promedio de la presión arterial

# Definir las hipótesis
# Problema: Se quiere probar si la reducción promedio de presión arterial con un medicamento es 10 mmHg (H0: μ = 10)
# contra la alternativa de que la reducción es menor a 10 mmHg (H1: μ < 10).

# Hipótesis Nula (H0): La reducción promedio poblacional de la presión arterial es igual a 10 mmHg.
# μ = 10 mmHg
hipotesis_nula = "H0: μ = 10 mmHg (La reducción promedio poblacional es igual a 10 mmHg)"

# Hipótesis Alternativa (H1): La reducción promedio poblacional de la presión arterial es menor a 10 mmHg.
# μ < 10 mmHg
hipotesis_alternativa = "H1: μ < 10 mmHg (La reducción promedio poblacional es menor a 10 mmHg)"

# Imprimir las hipótesis
print("Hipótesis para la reducción promedio de la presión arterial:")
print(hipotesis_nula)
print(hipotesis_alternativa)

"""**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average reduction in blood pressure, store it in a variable, and print it.


"""

#punto 24 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average reduction in blood pressure, given that the population standard deviation is known and the sample size is less than 30.


"""

#punto 24 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar poblacional (σ = 3 mmHg) y el tamaño de la muestra (n=25).
# Cuando la desviación estándar poblacional es conocida, el estadístico de prueba apropiado para probar la media poblacional es el estadístico Z.
estadistico_prueba = "Estadístico Z (Z-score)"

# La distribución asociada con el estadístico Z es la distribución normal estándar.
distribucion_asociada = "Distribución Normal Estándar (Z)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba}")
print(f"La distribución asociada es: {distribucion_asociada}")

"""**Reasoning**:
Calculate the critical Z-value for the unilateral left test and define the rejection region based on the significance level.


"""

#punto 24 - Determinar el valor crítico Z y la región de rechazo

# 1. Obtener el valor crítico Z
# alpha = 0.05 (nivel de significancia)
# Para una prueba unilateral izquierda, el valor crítico Z se busca en el percentil alpha.
valor_z_critico = st.norm.ppf(alpha)

# 2. Definir la región de rechazo
# La región de rechazo para una prueba unilateral izquierda es cuando el estadístico de prueba es menor o igual al valor crítico Z.
region_rechazo = f"Región de Rechazo: Z <= {valor_z_critico:.3f}"

# 3. Imprimir el valor crítico Z y la descripción de la región de rechazo
print(f"Valor crítico Z para alpha = {alpha} (unilateral izquierda): {valor_z_critico:.3f}")
print(region_rechazo)

"""**Reasoning**:
Calculate the Z-statistic using the sample mean, hypothesized population mean, population standard deviation, and sample size.


"""

# punto 24 - Calcular el estadístico de prueba Z

# 1. Definir las variables con los valores proporcionados
# Media muestral de la reducción de presión arterial
media_muestral = 8
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0 = 10
# Desviación estándar poblacional
desviacion_estandar_poblacional = 3
# Tamaño de la muestra
n = 25

# 2. Calcular el valor del estadístico Z
# Fórmula: Z = (media muestral - media poblacional hipotetizada) / (desviación estándar poblacional / sqrt(n))
estadistico_z = (media_muestral - media_poblacional_h0) / (desviacion_estandar_poblacional / np.sqrt(n))

# 3. Imprimir el valor calculado del estadístico de prueba Z
print(f"Media muestral: {media_muestral}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0}")
print(f"Desviación estándar poblacional: {desviacion_estandar_poblacional}")
print(f"Tamaño de la muestra (n): {n}")
print(f"\nEl valor del estadístico de prueba Z es: {estadistico_z:.3f}")

"""**Reasoning**:
Determine the p-value associated with the calculated Z-statistic for a left-tailed test.


"""

#punto 24 - Determinar el valor p

# Utilizar la función scipy.stats.norm.cdf() para calcular el valor p.
# Para una prueba unilateral izquierda, el valor p es P(Z <= estadistico_z | H0 es verdadera)
valor_p = st.norm.cdf(estadistico_z)

# Imprimir el estadístico Z y el valor p
print(f"Estadístico de prueba Z: {estadistico_z:.3f}")
print(f"Valor p (unilateral izquierda): {valor_p:.4f}")

"""**Reasoning**:
Visualize the standard normal distribution, indicating the critical Z-value, the rejection region, and the position of the calculated Z-statistic to visually represent the hypothesis test results.


"""

# punto 24 - Visualizar la distribución normal estándar

# 1. Crear un rango de valores para el eje x (valores Z)
x = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF) de la distribución normal estándar
pdf = st.norm.pdf(x)

# 3. Crear la gráfica de la distribución normal estándar
plt.figure(figsize=(10, 6))
plt.plot(x, pdf, label='Distribución Normal Estándar')

# 5. Agregar una línea vertical en el valor crítico Z
plt.axvline(valor_z_critico, color='red', linestyle='--', label=f'Valor Crítico Z = {valor_z_critico:.3f}')

# 6. Rellenar la región de rechazo (unilateral izquierda)
# La región de rechazo es donde x <= valor_z_critico
x_rechazo = np.linspace(-4, valor_z_critico, 100)
pdf_rechazo = st.norm.pdf(x_rechazo)
plt.fill_between(x_rechazo, pdf_rechazo, color='red', alpha=0.3, label='Región de Rechazo (α = 0.05)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_z, color='green', linestyle='-', label=f'Estadístico de Prueba Z = {estadistico_z:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor Z")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Normal Estándar, Región de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""**Reasoning**:
Compare the calculated Z-statistic with the critical Z-value (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average reduction in blood pressure.


"""

# punto 24 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba Z: estadistico_z
# Valor crítico Z: valor_z_critico
print(f"Estadístico de prueba Z ({estadistico_z:.3f}) vs Valor crítico Z ({valor_z_critico:.3f})")

if estadistico_z <= valor_z_critico:
    decision_estadistica_critico = "Rechazar H0"
else:
    decision_estadistica_critico = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p
# Alpha: alpha
print(f"\nValor p ({valor_p:.4f}) vs Alpha ({alpha:.2f})")

if valor_p <= alpha:
    decision_estadistica_pvalue = "Rechazar H0"
else:
    decision_estadistica_pvalue = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p:.4f}) es menor o igual que el nivel de significancia alpha ({alpha:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que la reducción promedio poblacional de la presión arterial es menor a 10 mmHg.")
else:
    print(f"Dado que el valor p ({valor_p:.4f}) es mayor que el nivel de significancia alpha ({alpha:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que la reducción promedio poblacional de la presión arterial es menor a 10 mmHg.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que la reducción promedio es 10 mmHg.")

"""## Summary:

### Data Analysis Key Findings

*   The null hypothesis (\$\text{H}_0\$) is that the average population reduction in blood pressure is equal to 10 mmHg, while the alternative hypothesis (\$\text{H}_1\$) is that the average population reduction is less than 10 mmHg.
*   The chosen significance level (\$\alpha\$) is 0.05.
*   Since the population standard deviation is known, the appropriate test statistic is the Z-score, which follows a standard normal distribution.
*   For a one-tailed left test with \$\alpha = 0.05\$, the critical Z-value is approximately -1.645, and the rejection region is when the test statistic is less than or equal to -1.645.
*   The calculated Z-test statistic based on the sample data is approximately -3.333.
*   The calculated p-value for this one-tailed left test is approximately 0.0004.
*   Comparing the test statistic (-3.333) to the critical value (-1.645) and the p-value (0.0004) to alpha (0.05), the decision is to reject the null hypothesis.

### Insights or Next Steps

*   The analysis provides strong evidence, at a 5% significance level, to conclude that the average blood pressure reduction from the medication is indeed less than 10 mmHg.
*   Future studies could explore the magnitude of the reduction more precisely or compare this medication's effectiveness against other treatments.

# Task
Resuelva los problemas de estadística inferencial proporcionados en un cuaderno de Google Colab usando Python, siguiendo los procedimientos detallados para pruebas de hipótesis, intervalos de confianza y tamaños de muestra, utilizando `scipy.stats` y `matplotlib` para cálculos y visualizaciones, comentando el código y documentando las respuestas.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para el tiempo promedio de entrega a domicilio.

**Reasoning**:
Define and print the null and alternative hypotheses for the average home delivery time based on the problem description.

**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average home delivery time, store it in a variable, and print it.

**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average home delivery time, given that the population standard deviation is known and the sample size is large.

# Task
Resuelva los siguientes problemas de estadística inferencial en un cuaderno de Google Colab usando Python, siguiendo los procedimientos especificados para pruebas de hipótesis, intervalos de confianza y tamaños de muestra. Utilice `scipy.stats` para cálculos estadísticos y p-valores, y `matplotlib` para graficar. Comente todo el código y documente las respuestas con texto interpretativo.

**Problemas:**

1.  **Intervalo de Confianza para la Media (σ conocida):**
    *   Estimar la altura promedio de estudiantes universitarios. Muestra: n=50, media=170 cm, σ=10 cm. Nivel de confianza: 95%.
    *   Estimar la calificación promedio de un examen nacional. Muestra: n=100, media=75 puntos, σ=15 puntos. Nivel de confianza: 90%.
    *   Estimar el diámetro promedio de tornillos. Muestra: n=30, media=2.5 cm, σ=0.2 cm. Nivel de confianza: 99%.
    *   Estimar la duración promedio de baterías. Muestra: n=25, media=12 horas, σ=1.5 horas. Nivel de confianza: 95%.
    *   Estimar el crecimiento promedio de plantas con fertilizante. Muestra: n=40, media=20 cm, σ=4 cm. Nivel de confianza: 95%.

2.  **Intervalo de Confianza para la Media (σ desconocida):**
    *   Estimar la temperatura promedio del café. Muestra: n=12, media=84°C, s=5°C. Nivel de confianza: 95%.
    *   Estimar la duración promedio de la batería de un smartphone. Muestra: n=15, media=8 horas, s=1.2 horas. Nivel de confianza: 90%.
    *   Estimar la altura promedio de plántulas de maíz. Muestra: n=10, media=25 cm, s=3 cm. Nivel de confianza: 99%.
    *   Estimar el tiempo promedio de entrega de pizza. Muestra: n=20, media=30 minutos, s=4 minutos. Nivel de confianza: 95%.
    *   Estimar el peso promedio de libros de matemáticas. Muestra: n=8, media=1.5 kg, s=0.3 kg. Nivel de confianza: 95%.

3.  **Tamaño de Muestra para Proporción:**
    *   Estimar la proporción de residentes vacunados. Margen de error: 3%, Nivel de confianza: 95%. Considerar caso con estudio piloto (p=0.72) y sin estudio piloto.
    *   Estimar la tasa de devoluciones de un producto. Datos históricos: p=0.07. Margen de error: 4%, Nivel de confianza: 90%.
    *   Estimar la proporción de votantes que apoyan a un candidato. Encuesta previa: p=0.42. Margen de error: 2%, Nivel de confianza: 99%. Considerar caso con encuesta previa y sin ella.
    *   Medir el apoyo a una nueva política. Encuesta informal: p=0.56. Margen de error: 5%, Nivel de confianza: 95%. Justificar el uso de p=0.5 sin datos preliminares.
    *   Estimar la proporción de pacientes que mejoran con un tratamiento. Prueba preliminar: p=0.69. Margen de error: 4%, Nivel de confianza: 95%. Considerar caso conservador (p=0.5).

4.  **Tamaño de Muestra para Media (σ conocida):**
    *   Estimar el tiempo promedio de espera en urgencias. σ=8 minutos. Margen de error: 2 minutos, Nivel de confianza: 95%.
    *   Analizar el consumo mensual promedio de clientes residenciales. σ=50 kWh. Margen de error: 10 kWh, Nivel de confianza: 90%.
    *   Estimar el peso promedio de paquetes. σ=1.2 kg. Margen de error: 0.5 kg, Nivel de confianza: 99%.
    *   Estimar la duración promedio de reuniones. σ=5 minutos. Margen de error: 1.5 minutos, Nivel de confianza: 95%.
    *   Estimar el puntaje promedio de un examen estandarizado. σ=12. Margen de error: 3 puntos, Nivel de confianza: 90%.

5.  **Prueba de Hipótesis para la Media (σ conocida):**
    *   Peso promedio de paquetes de cereal. Afirmación: μ=500 g. Muestra: n=40, media=495 g, σ=15 g. α=0.05. Prueba unilateral (subllenando).
    *   Duración promedio de baterías. Afirmación: μ=1200 horas. Muestra: n=50, media=1180 horas, σ=100 horas. α=0.01. Prueba unilateral (duración menor).
    *   Promedio de clase en examen nacional. Promedio nacional: μ=75 puntos. Muestra: n=36, media=78 puntos, σ=12. α=0.05. Prueba bilateral (promedio diferente).
    *   Reducción de presión arterial por medicamento. Afirmación: μ=10 mmHg. Muestra: n=25, media=8 mmHg, σ=3 mmHg. α=0.05. Prueba unilateral (reducción menor).
    *   Tiempo promedio de entrega a domicilio. Afirmación: μ=25 minutos. Muestra: n=60, media=498 mL, σ=5 mL. α=0.01. Prueba bilateral (máquina descalibrada).

6.  **Prueba de Hipótesis para la Media (σ desconocida):**
    *   Tiempo promedio de entrega a domicilio. Afirmación: μ=25 minutos. Muestra: n=15, media=28 minutos, s=4 minutos. α=0.05. Prueba unilateral (tiempo mayor).

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para el tiempo promedio de entrega a domicilio.

## Summary:

### Data Analysis Key Findings

* The null hypothesis (\$\text{H}_0\$) states that the average population volume of the bottles is 500 mL, while the alternative hypothesis (\$\text{H}_1\$) states that the average population volume is different from 500 mL.
* The chosen significance level (\$\alpha\$) for this test is 0.01.
* Since the population standard deviation (\$\sigma = 5\text{ mL}\$) is known and the sample size (\(n=60\)) is large (\(n \ge 30\)), the appropriate test statistic is the Z-score, which follows a standard normal distribution.
* For a two-tailed test with \$\alpha = 0.01\$, the significance level is split into two tails (\$\alpha/2 = 0.005\$). The critical Z-values for this test are approximately -2.576 and 2.576. The rejection regions are when the test statistic is less than or equal to -2.576 or greater than or equal to 2.576.
* The calculated Z-test statistic based on the sample data (\(n=60\), sample mean = 498 mL) is approximately -3.098.
* The calculated p-value for this two-tailed test is approximately 0.0019.
* Comparing the test statistic (-3.098) to the critical values (-2.576 and 2.576), the test statistic falls within the rejection region (-3.098 $\le$ -2.576).
* Comparing the p-value (0.0019) to alpha (0.01), the p-value is less than alpha (0.0019 $\le$ 0.01).
* Based on both comparisons, the statistical decision is to **reject the null hypothesis (\$\text{H}_0\$)**.

### Insights or Next Steps

* The analysis provides strong statistically significant evidence, at a 1% significance level, to conclude that the average volume of liquid filled by the machine is **different** from 500 mL.
* Specifically, since the sample mean (498 mL) is less than 500 mL and the test is statistically significant, there is evidence to suggest that the machine is **underfilling** the bottles on average.
* The company should investigate the machine to identify the cause of this discrepancy and recalibrate it to ensure it fills bottles to the target volume of 500 mL. Further quality control checks should be implemented after recalibration.

**Reasoning**:
Compare the calculated Z-statistic with the critical Z-values (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average bottle volume.
"""

# punto 25 - Visualizar la distribución normal estándar

# 1. Crear un rango de valores para el eje x (valores Z)
x_entrega = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF) de la distribución normal estándar
pdf_entrega = st.norm.pdf(x_entrega)

# 3. Crear la gráfica de la distribución normal estándar
plt.figure(figsize=(10, 6))
plt.plot(x_entrega, pdf_entrega, label='Distribución Normal Estándar')

# 5. Agregar líneas verticales en los valores críticos Z
plt.axvline(valor_z_critico_inferior_entrega, color='red', linestyle='--', label=f'Valores Críticos Z = {valor_z_critico_inferior_entrega:.3f}, {valor_z_critico_superior_entrega:.3f}')
plt.axvline(valor_z_critico_superior_entrega, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_z_critico_inferior
x_rechazo_izquierda_entrega = np.linspace(-4, valor_z_critico_inferior_entrega, 100)
pdf_rechazo_izquierda_entrega = st.norm.pdf(x_rechazo_izquierda_entrega)
plt.fill_between(x_rechazo_izquierda_entrega, pdf_rechazo_izquierda_entrega, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.01)')

# La región de rechazo derecha es donde x >= valor_z_critico_superior
x_rechazo_derecha_entrega = np.linspace(valor_z_critico_superior_entrega, 4, 100)
pdf_rechazo_derecha_entrega = st.norm.pdf(x_rechazo_derecha_entrega)
plt.fill_between(x_rechazo_derecha_entrega, pdf_rechazo_derecha_entrega, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_z_entrega, color='green', linestyle='-', label=f'Estadístico de Prueba Z = {estadistico_z_entrega:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor Z")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Normal Estándar, Regiones de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

#punto 25 - Determinar el valor p

# Utilizar la función scipy.stats.norm.cdf() para calcular el valor p.
# Para una prueba bilateral, el valor p es 2 * P(Z >= |estadistico_z_entrega| | H0 es verdadera)
# o 2 * P(Z <= -|estadistico_z_entrega| | H0 es verdadera)
# Como nuestro estadístico Z es negativo, calculamos cdf(estadistico_z_entrega) para la cola izquierda
# y multiplicamos por 2 para ambas colas.
valor_p_entrega = 2 * st.norm.cdf(estadistico_z_entrega)

# Imprimir el estadístico Z y el valor p
print(f"Estadístico de prueba Z: {estadistico_z_entrega:.3f}")
print(f"Valor p (bilateral): {valor_p_entrega:.4f}")

"""**Reasoning**:
Calculate the Z-statistic using the sample mean, hypothesized population mean, population standard deviation, and sample size.
"""

# punto 25 - Calcular el estadístico de prueba Z

# 1. Definir las variables con los valores proporcionados
# Media muestral del volumen de las botellas
media_muestral_entrega = 498
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0_entrega = 500
# Desviación estándar poblacional
desviacion_estandar_poblacional_entrega = 5
# Tamaño de la muestra
n_entrega = 60

# 2. Calcular el valor del estadístico Z
# Fórmula: Z = (media muestral - media poblacional hipotetizada) / (desviación estándar poblacional / sqrt(n))
estadistico_z_entrega = (media_muestral_entrega - media_poblacional_h0_entrega) / (desviacion_estandar_poblacional_entrega / np.sqrt(n_entrega))

# 3. Imprimir el valor calculado del estadístico de prueba Z
print(f"Media muestral: {media_muestral_entrega}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0_entrega}")
print(f"Desviación estándar poblacional: {desviacion_estandar_poblacional_entrega}")
print(f"Tamaño de la muestra (n): {n_entrega}")
print(f"\nEl valor del estadístico de prueba Z es: {estadistico_z_entrega:.3f}")

#punto 25 - Determinar los valores críticos Z y las regiones de rechazo

# 1. Obtener los valores críticos Z
# alpha_entrega = 0.01 (nivel de significancia)
# Para una prueba bilateral (dos colas), alpha se divide en dos: alpha/2.
# Los valores críticos Z se buscan en los percentiles alpha/2 y 1 - alpha/2.
alpha_dos_colas_entrega = alpha_entrega / 2
valor_z_critico_inferior_entrega = st.norm.ppf(alpha_dos_colas_entrega)
valor_z_critico_superior_entrega = st.norm.ppf(1 - alpha_dos_colas_entrega)

# 2. Definir las regiones de rechazo
# Las regiones de rechazo para una prueba bilateral son cuando el estadístico de prueba es menor o igual al valor crítico Z inferior O mayor o igual al valor crítico Z superior.
region_rechazo_entrega = f"Región de Rechazo: Z <= {valor_z_critico_inferior_entrega:.3f} o Z >= {valor_z_critico_superior_entrega:.3f}"

# 3. Imprimir los valores críticos Z y la descripción de las regiones de rechazo
print(f"Valor crítico Z inferior para alpha/2 = {alpha_dos_colas_entrega}: {valor_z_critico_inferior_entrega:.3f}")
print(f"Valor crítico Z superior para 1 - alpha/2 = {1 - alpha_dos_colas_entrega}: {valor_z_critico_superior_entrega:.3f}")
print(region_rechazo_entrega)

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average bottle volume, given that the population standard deviation is known and the sample size is large.
"""

#punto 25 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar poblacional (σ = 5 mL) y el tamaño de la muestra (n=60).
# Como la desviación estándar poblacional es conocida y el tamaño de la muestra es >= 30, el estadístico de prueba apropiado para probar la media poblacional es el estadístico Z.
estadistico_prueba_entrega = "Estadístico Z (Z-score)"

# La distribución asociada con el estadístico Z es la distribución normal estándar.
distribucion_asociada_entrega = "Distribución Normal Estándar (Z)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_entrega}")
print(f"La distribución asociada es: {distribucion_asociada_entrega}")

#punto 25 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 1%.
alpha_entrega = 0.01

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_entrega}")

#punto 25 - Hipótesis para el volumen promedio de las botellas

# Definir las hipótesis
# Problema: Una máquina llena botellas de 500 mL. Se sospecha que la media es diferente a 500 mL.

# Hipótesis Nula (H0): El volumen promedio poblacional de las botellas es igual a 500 mL.
# μ = 500 mL
hipotesis_nula_entrega = "H0: μ = 500 mL (El volumen promedio poblacional es igual a 500 mL)"

# Hipótesis Alternativa (H1): El volumen promedio poblacional de las botellas es diferente a 500 mL.
# μ ≠ 500 mL
hipotesis_alternativa_entrega = "H1: μ ≠ 500 mL (El volumen promedio poblacional es diferente a 500 mL)"

# Imprimir las hipótesis
print("Hipótesis para el volumen promedio de las botellas:")
print(hipotesis_nula_entrega)
print(hipotesis_alternativa_entrega)

"""**Reasoning**:
Define and print the null and alternative hypotheses for the average home delivery time based on the problem description.

**Reasoning**:
Identify the significance level (alpha) stated in the problem description for the hypothesis test regarding the average home delivery time, store it in a variable, and print it.

## Summary:

### Q&A

*   **¿Cuál es la hipótesis nula ($H_0$) y la hipótesis alternativa ($H_1$) para la prueba sobre el tiempo promedio de entrega a domicilio (σ desconocida)?**
    *   $H_0$: El tiempo promedio poblacional de entrega a domicilio es igual a 25 minutos ($\mu = 25$).
    *   $H_1$: El tiempo promedio poblacional de entrega a domicilio es mayor a 25 minutos ($\mu > 25$).

*   **¿Cuál es el nivel de significancia ($\alpha$) utilizado en la prueba con σ desconocida?**
    *   El nivel de significancia ($\alpha$) es del 0.05 (5%).

*   **¿Qué estadístico de prueba y distribución se utilizan para la prueba de la media con σ desconocida y una muestra de n=15?**
    *   Se utiliza el estadístico t, siguiendo una distribución t de Student con n-1 grados de libertad.

*   **¿Cuál fue la decisión estadística y la conclusión para la prueba de hipótesis con σ desconocida?**
    *   La decisión estadística fue rechazar la hipótesis nula ($H_0$).
    *   La conclusión es que hay evidencia estadísticamente significativa para concluir que el tiempo promedio poblacional de entrega a domicilio es mayor a 25 minutos.

### Data Analysis Key Findings

*   For the hypothesis test with known $\sigma$ (assuming inconsistent values from the prompt):
    *   The calculated Z-statistic was approximately 1.936.
    *   The critical Z-values for a two-tailed test at $\alpha = 0.01$ were approximately -2.576 and 2.576.
    *   The p-value was approximately 0.0528.
    *   The Z-statistic (1.936) did not fall into the rejection region ($Z \le -2.576$ or $Z \ge 2.576$).
    *   The p-value (0.0528) was greater than $\alpha$ (0.01).
    *   The decision was not to reject $H_0$.

*   For the hypothesis test with unknown $\sigma$:
    *   The null hypothesis was $H_0: \mu = 25$ minutes and the alternative hypothesis was $H_1: \mu > 25$ minutes.
    *   The level of significance was $\alpha = 0.05$.
    *   The degrees of freedom were 14 ($n-1 = 15-1$).
    *   The critical t-value for a one-tailed right test was approximately 1.761.
    *   The calculated t-statistic was approximately 2.905.
    *   The p-value for the t-statistic was approximately 0.0058.
    *   The t-statistic (2.905) fell into the rejection region ($t \ge 1.761$).
    *   The p-value (0.0058) was less than $\alpha$ (0.05).
    *   The decision was to reject $H_0$.

### Insights or Next Steps

*   The two hypothesis tests for the delivery time yielded different conclusions due to differing assumptions ($\sigma$ known vs. unknown), sample sizes, and potentially different sample means and standard deviations used in the calculations (as the prompt had inconsistencies). Future analysis should clarify the correct values for $\sigma$ or definitively treat it as unknown.
*   The test with unknown $\sigma$ provides statistically significant evidence that the average delivery time is *greater* than 25 minutes. Further investigation into the delivery process is warranted to identify causes for this longer average time.
"""

# punto 25 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con los valores críticos
# Estadístico de prueba Z: estadistico_z_entrega
# Valores críticos Z: valor_z_critico_inferior_entrega, valor_z_critico_superior_entrega
print(f"Estadístico de prueba Z ({estadistico_z_entrega:.3f}) vs Valores críticos Z ({valor_z_critico_inferior_entrega:.3f}, {valor_z_critico_superior_entrega:.3f})")

if estadistico_z_entrega <= valor_z_critico_inferior_entrega or estadistico_z_entrega >= valor_z_critico_superior_entrega:
    decision_estadistica_critico_entrega = "Rechazar H0"
else:
    decision_estadistica_critico_entrega = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_entrega}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_entrega
# Alpha: alpha_entrega
print(f"\nValor p ({valor_p_entrega:.4f}) vs Alpha ({alpha_entrega:.2f})")

if valor_p_entrega <= alpha_entrega:
    decision_estadistica_pvalue_entrega = "Rechazar H0"
else:
    decision_estadistica_pvalue_entrega = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_entrega}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_entrega == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_entrega:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_entrega:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_entrega*100}%,")
    print("para concluir que el volumen promedio poblacional de las botellas es diferente a 500 mL.")
else:
    print(f"Dado que el valor p ({valor_p_entrega:.4f}) es mayor que el nivel de significancia alpha ({alpha_entrega:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_entrega*100}%,")
    print("para concluir que el volumen promedio poblacional de las botellas es diferente a 500 mL.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el volumen promedio es 500 mL.")

# punto 25 - Visualizar la distribución normal estándar

# 1. Crear un rango de valores para el eje x (valores Z)
x_entrega = np.linspace(-4, 4, 200)

# 2. Calcular la función de densidad de probabilidad (PDF) de la distribución normal estándar
pdf_entrega = st.norm.pdf(x_entrega)

# 3. Crear la gráfica de la distribución normal estándar
plt.figure(figsize=(10, 6))
plt.plot(x_entrega, pdf_entrega, label='Distribución Normal Estándar')

# 5. Agregar líneas verticales en los valores críticos Z
plt.axvline(valor_z_critico_inferior_entrega, color='red', linestyle='--', label=f'Valores Críticos Z = {valor_z_critico_inferior_entrega:.3f}, {valor_z_critico_superior_entrega:.3f}')
plt.axvline(valor_z_critico_superior_entrega, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_z_critico_inferior
x_rechazo_izquierda_entrega = np.linspace(-4, valor_z_critico_inferior_entrega, 100)
pdf_rechazo_izquierda_entrega = st.norm.pdf(x_rechazo_izquierda_entrega)
plt.fill_between(x_rechazo_izquierda_entrega, pdf_rechazo_izquierda_entrega, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.01)')

# La región de rechazo derecha es donde x >= valor_z_critico_superior
x_rechazo_derecha_entrega = np.linspace(valor_z_critico_superior_entrega, 4, 100)
pdf_rechazo_derecha_entrega = st.norm.pdf(x_rechazo_derecha_entrega)
plt.fill_between(x_rechazo_derecha_entrega, pdf_rechazo_derecha_entrega, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_z_entrega, color='green', linestyle='-', label=f'Estadístico de Prueba Z = {estadistico_z_entrega:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor Z")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Normal Estándar, Regiones de Rechazo y Estadístico de Prueba")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()



"""# Task
Resuelve los siguientes problemas de estadística inferencial en un cuaderno de Google Colab usando Python, siguiendo el procedimiento para pruebas de hipótesis, intervalos de confianza y tamaños de muestra. Utiliza `scipy.stats` para cálculos estadísticos y p-valores, y `matplotlib` para graficar. Comenta todo el código y documenta las respuestas.

**Problemas:**

1.  **Intervalo de Confianza para la Media (σ conocida):**
    *   Estimar la altura promedio de estudiantes universitarios. Muestra: 50 estudiantes, media = 170 cm, σ = 10 cm. IC del 95 %.
    *   Estimar la calificación promedio de un examen nacional. σ = 15 puntos. Muestra: 100 estudiantes, media = 75 puntos. IC del 90 %.
    *   Estimar el diámetro promedio de tornillos. σ = 0.2 cm. Muestra: 30 tornillos, media = 2.5 cm. IC del 99 %.
    *   Estimar la duración promedio de baterías. σ = 1.5 horas. Muestra: 25 baterías, media = 12 horas. IC del 95 %.
    *   Estimar el crecimiento promedio de plantas con fertilizante. σ = 4 cm. Muestra: 40 plantas, media = 20 cm. IC del 95 %.

2.  **Intervalo de Confianza para la Media (σ desconocida):**
    *   Estimar la temperatura promedio del café. Muestra: 12 tazas, media = 84°C, s = 5°C. IC del 95 %.
    *   Estimar la duración promedio de la batería de un smartphone. Muestra: 15 dispositivos, media = 8 horas, s = 1.2 horas. IC del 90 %.
    *   Estimar la altura promedio de plántulas de maíz. Muestra: 10 plantas, media = 25 cm, s = 3 cm. IC del 99 %.
    *   Estimar el tiempo promedio de entrega de pizza. Muestra: 20 entregas, media = 30 minutos, s = 4 minutos. IC del 95 %.
    *   Estimar el peso promedio de libros de matemáticas. Muestra: 8 libros, media = 1.5 kg, s = 0.3 kg. IC del 95 %.

3.  **Tamaño de Muestra para Proporción:**
    *   Estimar la proporción de residentes vacunados. Estudio piloto: 72 % vacunados. Margen de error = 3 %, Confianza = 95 %. Calcular tamaño con y sin estudio piloto.
    *   Estimar la tasa de devoluciones de un producto. Datos históricos: 7 % devoluciones. Margen de error = 4 %, Confianza = 90 %.
    *   Estimar la proporción de votantes que apoyan a un candidato. Encuesta previa: 42 % apoyo. Margen de error = 2 %, Confianza = 99 %. Calcular tamaño con y sin encuesta previa.
    *   Medir el apoyo a una nueva política escolar. Encuesta informal: 56 % de acuerdo. Margen de error = 5 %, Confianza = 95 %. Justificar uso de p=0.5 sin datos preliminares.
    *   Estimar la proporción de pacientes que mejoran con un tratamiento. Prueba preliminar: 69 % mejoría. Margen de error = 4 %, Confianza = 95 %. Calcular tamaño con p=0.5 (conservador).

4.  **Tamaño de Muestra para Media (σ conocida):**
    *   Estimar el tiempo promedio de espera en urgencias. σ = 8 minutos. Margen de error = 2 minutos, Confianza = 95 %.
    *   Analizar el consumo mensual promedio de clientes residenciales. σ = 50 kWh. Margen de error = 10 kWh, Confianza = 90 %.
    *   Estimar el peso promedio de paquetes transportados. σ = 1.2 kg. Margen de error = 0.5 kg, Confianza = 99 %.
    *   Estimar la duración promedio de reuniones. σ = 5 minutos. Margen de error = 1.5 minutos, Confianza = 95 %.
    *   Estudiar el puntaje promedio de un examen estandarizado. σ = 12. Margen de error = 3 puntos, Confianza = 90 %.

5.  **Prueba de Hipótesis para la Media (σ conocida):**
    *   Peso de paquetes de cereal: H0: μ = 500 g, H1: μ < 500 g. Muestra: 40 paquetes, media = 495 g, σ = 15 g. α = 0.05. Calcular Z, región crítica, concluir.
    *   Duración de baterías: H0: μ = 1200 horas, H1: μ < 1200 horas. Muestra: 50 baterías, media = 1180 horas, σ = 100 horas. α = 0.01. Calcular Z, región crítica, concluir.
    *   Promedio de clase en examen: H0: μ = 75 puntos, H1: μ ≠ 75 puntos. Muestra: 36 estudiantes, media = 78 puntos, σ = 12. α = 0.05. Calcular Z, región crítica, concluir.
    *   Reducción de presión arterial: H0: μ = 10 mmHg, H1: μ < 10 mmHg. Muestra: 25 pacientes, media = 8 mmHg, σ = 3 mmHg. α = 0.05. Calcular Z, región crítica, concluir.
    *   Llenado de botellas: H0: μ = 500 mL, H1: μ ≠ 500 mL. Muestra: 60 botellas, media = 498 mL, σ = 5 mL. α = 0.01. Calcular Z, región crítica, concluir.

6.  **Prueba de Hipótesis para la Media (σ desconocida):**
    *   Tiempo promedio de entrega de restaurante: H0: μ = 25 minutos, H1: μ > 25 minutos. Muestra: 15 entregas, media = 28 minutos, s = 4 minutos. α = 0.05. Calcular t, grados de libertad, valor crítico, región crítica, concluir.
    *   Promedio de clase en matemáticas: H0: μ = 80, H1: μ ≠ 80. Muestra: 12 estudiantes, media = 75, s = 8. α = 0.01. Calcular t, grados de libertad, valor crítico, región crítica, concluir.

## Definir las hipótesis

### Subtask:
Establecer formalmente la hipótesis nula (H0) y la hipótesis alternativa (H1) para el promedio de la clase de matemáticas.

**Reasoning**:
Define and print the null and alternative hypotheses for the average math class score based on the problem statement.

## Summary:

### Data Analysis Key Findings

*   **Intervalo de Confianza para la Media (σ conocida):** For the given scenarios, the calculated 95% confidence intervals for the mean were \[167.22, 172.78] cm (students' height), \[72.53, 77.47] points (exam score), \[2.42, 2.58] cm (screws diameter), \[11.41, 12.59] hours (battery life), and \[18.76, 21.24] cm (plant growth). The 90% CI for exam score was \[72.53, 77.47] points, and the 99% CI for screw diameter was \[2.42, 2.58] cm.
*   **Intervalo de Confianza para la Media (σ desconocida):** The calculated confidence intervals for the mean when sigma is unknown were \[80.82, 87.18]°C (coffee temperature, 95% CI), \[7.44, 8.56] hours (smartphone battery, 90% CI), \[21.67, 28.33] cm (corn seedling height, 99% CI), \[28.05, 31.95] minutes (pizza delivery, 95% CI), and \[1.18, 1.82] kg (math books weight, 95% CI).
*   **Tamaño de Muestra para Proporción:** To estimate the proportion of vaccinated residents with 95% confidence and a 3% margin of error, a sample size of 822 is needed with a pilot study (72% vaccinated) and 1068 without. For the product return rate (7% historical), a sample size of 127 is required for 90% confidence and a 4% margin of error. To estimate voter support (42% prior), 4039 samples are needed for 99% confidence and a 2% margin of error; without prior data (using p=0.5), it's 4148. For school policy support (56% informal), using p=0.5 results in a required sample size of 385 for 95% confidence and a 5% margin of error, which is justified as a conservative approach when preliminary data is informal. For patient improvement (69% preliminary), using p=0.5 (conservative) requires a sample size of 601 for 95% confidence and a 4% margin of error.
*   **Tamaño de Muestra para Media (σ conocida):** The required sample sizes for estimating means with known sigma are: 62 (emergency wait time, σ=8, ME=2, 95% CI), 68 (residential consumption, σ=50, ME=10, 90% CI), 40 (package weight, σ=1.2, ME=0.5, 99% CI), 43 (meeting duration, σ=5, ME=1.5, 95% CI), and 43 (standardized test score, σ=12, ME=3, 90% CI).
*   **Prueba de Hipótesis para la Media (σ conocida):**
    *   Cereal Weight: H0: μ = 500g, H1: μ < 500g, sample mean=495g, σ=15g, n=40, α=0.05. Z = -2.108. Critical region: Z $\leq$ -1.645. Decision: Reject H0. Conclusion: There is significant evidence that the mean weight is less than 500g.
    *   Battery Life: H0: μ = 1200h, H1: μ < 1200h, sample mean=1180h, σ=100h, n=50, α=0.01. Z = -1.414. Critical region: Z $\leq$ -2.326. Decision: Do not reject H0. Conclusion: No significant evidence that the mean battery life is less than 1200 hours.
    *   Exam Average: H0: μ = 75, H1: μ $\neq$ 75, sample mean=78, σ=12, n=36, α=0.05. Z = 1.5. Critical region: |Z| $\geq$ 1.96. Decision: Do not reject H0. Conclusion: No significant evidence that the mean exam score is different from 75.
    *   Blood Pressure Reduction: H0: μ = 10mmHg, H1: μ < 10mmHg, sample mean=8mmHg, σ=3mmHg, n=25, α=0.05. Z = -3.333. Critical region: Z $\leq$ -1.645. Decision: Reject H0. Conclusion: Significant evidence that the mean blood pressure reduction is less than 10mmHg.
    *   Bottle Filling: H0: μ = 500mL, H1: μ $\neq$ 500mL, sample mean=498mL, σ=5mL, n=60, α=0.01. Z = -3.098. Critical region: |Z| $\geq$ 2.576. Decision: Reject H0. Conclusion: Significant evidence that the mean bottle filling volume is different from 500mL.
*   **Prueba de Hipótesis para la Media (σ desconocida):**
    *   Restaurant Delivery Time: H0: μ = 25 min, H1: μ > 25 min, sample mean=28 min, s=4 min, n=15, α=0.05. t = 2.905, df=14. Critical value: 1.761. Decision: Reject H0. Conclusion: Significant evidence that the mean delivery time is greater than 25 minutes.
    *   Math Class Average: H0: μ = 80, H1: μ $\neq$ 80, sample mean=75, s=8, n=12, α=0.01. t = -2.165, df=11. Critical values: $\pm$3.106. Decision: Do not reject H0. Conclusion: No significant evidence that the mean math class average is different from 80.

### Insights or Next Steps

*   For hypothesis tests that did not reject the null hypothesis, consider if the sample size was sufficient or if there might be a Type II error (failing to reject a false null hypothesis).
*   The calculated sample sizes provide a guideline; practical constraints such as cost and feasibility should also be considered when designing future studies.

**Reasoning**:
Compare the calculated t-statistic with the critical t-values (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average delivery time.

**Reasoning**:
Define the rejection regions for the two-tailed t-test based on the critical t-values.

**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average math class score, given that the population standard deviation is unknown and the sample size is small.

**Reasoning**:
Compare the calculated t-statistic with the critical t-value (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average delivery time.
"""

# punto 26 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba t: estadistico_t
# Valor crítico t: valor_t_critico
print(f"Estadístico de prueba t ({estadistico_t:.3f}) vs Valor crítico t ({valor_t_critico:.3f})")

if estadistico_t >= valor_t_critico:
    decision_estadistica_critico_entrega_t = "Rechazar H0"
else:
    decision_estadistica_critico_entrega_t = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_entrega_t}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p
# Alpha: alpha
print(f"\nValor p ({valor_p:.4f}) vs Alpha ({alpha:.2f})")

if valor_p <= alpha:
    decision_estadistica_pvalue_entrega_t = "Rechazar H0"
else:
    decision_estadistica_pvalue_entrega_t = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_entrega_t}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_entrega_t == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p:.4f}) es menor o igual que el nivel de significancia alpha ({alpha:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el tiempo promedio poblacional de entrega a domicilio es mayor a 25 minutos.")
else:
    print(f"Dado que el valor p ({valor_p:.4f}) es mayor que el nivel de significancia alpha ({alpha:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha*100}%,")
    print("para concluir que el tiempo promedio poblacional de entrega a domicilio es mayor a 25 minutos.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el tiempo promedio es 25 minutos.")

# punto 26 - Visualizar la distribución t de Student

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba t: estadistico_t (calculado en un paso anterior)
# Grados de libertad: grados_libertad (calculado en un paso anterior)
# Alpha: alpha (definido en un paso anterior)
# Valor crítico t: valor_t_critico (calculado en un paso anterior)

# 2. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x_entrega_t = np.linspace(-4, 4, 200)

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad)
pdf_entrega_t = st.t.pdf(x_entrega_t, grados_libertad)

# 4. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x_entrega_t, pdf_entrega_t, label=f'Distribución t (df={grados_libertad})')

# 5. Agregar una línea vertical en el valor crítico de t
# Para una prueba unilateral derecha, el valor crítico es positivo.
plt.axvline(valor_t_critico, color='red', linestyle='--', label=f'Valor Crítico t = {valor_t_critico:.3f}')

# 6. Rellenar la región de rechazo (unilateral derecha)
# La región de rechazo es donde x >= valor_t_critico
x_rechazo_derecha_entrega_t = np.linspace(valor_t_critico, 4, 100)
pdf_rechazo_derecha_entrega_t = st.t.pdf(x_rechazo_derecha_entrega_t, grados_libertad)
plt.fill_between(x_rechazo_derecha_entrega_t, pdf_rechazo_derecha_entrega_t, color='red', alpha=0.3, label='Región de Rechazo (α = 0.05)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Región de Rechazo y Estadístico de Prueba (Tiempo de Entrega)")

# 9. Añadir una leyenda
plt.legend()

# 10. Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""**Reasoning**:
Determine the p-value associated with the calculated t-statistic for a one-tailed right test.
"""

#punto 26 - Determinar el valor p

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba unilateral derecha, el valor p es P(T >= estadistico_t | H0 es verdadera)
# Esto es igual a 1 - P(T < estadistico_t | H0 es verdadera)
valor_p = 1 - st.t.cdf(estadistico_t, grados_libertad)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t:.3f}")
print(f"Valor p (unilateral derecha): {valor_p:.4f}")

# punto 26 - Calcular el estadístico de prueba t

# 1. Definir las variables con los valores proporcionados
# Media muestral del tiempo de entrega
media_muestral = 28
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0 = 25
# Desviación estándar muestral
desviacion_estandar_muestral = 4
# Tamaño de la muestra
n = 15

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t = (media_muestral - media_poblacional_h0) / (desviacion_estandar_muestral / np.sqrt(n))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral}")
print(f"Tamaño de la muestra (n): {n}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t:.3f}")

"""**Reasoning**:
Define the rejection region for the one-tailed right t-test based on the critical t-value.
"""

#punto 26 - Definir la región de rechazo

# El valor crítico t para alpha = 0.05 (unilateral derecha) ya fue calculado como valor_t_critico.

# La región de rechazo para una prueba unilateral derecha es cuando el estadístico de prueba es mayor o igual al valor crítico de t.
region_rechazo_entrega_t = f"Región de Rechazo: t >= {valor_t_critico:.3f}"

# Imprimir la descripción de la región de rechazo
print(region_rechazo_entrega_t)

#punto 26 - Determinar los grados de libertad y el valor crítico t

# 1. Calcular los grados de libertad (df)
# n = 15 (tamaño de la muestra)
n = 15
grados_libertad = n - 1

# 2. Obtener el valor crítico t
# alpha = 0.05 (nivel de significancia)
# Para una prueba unilateral derecha, el valor crítico t se busca en el percentil 1 - alpha.
valor_t_critico = st.t.ppf(1 - alpha, grados_libertad)

# 3. Imprimir los grados de libertad y el valor crítico t
print(f"Grados de libertad (df): {grados_libertad}")
print(f"Valor crítico t para alpha = {alpha} (unilateral derecha): {valor_t_critico:.3f}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average home delivery time, given that the population standard deviation is unknown and the sample size is small.
"""

#punto 26 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar muestral (s = 4 minutos) y el tamaño de la muestra (n=15).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba_entrega_t = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada_entrega_t = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_entrega_t}")
print(f"La distribución asociada es: {distribucion_asociada_entrega_t}")

#punto 26 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha}")

# punto 27 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con los valores críticos
# Estadístico de prueba t: estadistico_t_matematicas
# Valores críticos t: valor_t_critico_inferior_matematicas, valor_t_critico_superior_matematicas
print(f"Estadístico de prueba t ({estadistico_t_matematicas:.3f}) vs Valores críticos t ({valor_t_critico_inferior_matematicas:.3f}, {valor_t_critico_superior_matematicas:.3f})")

if estadistico_t_matematicas <= valor_t_critico_inferior_matematicas or estadistico_t_matematicas >= valor_t_critico_superior_matematicas:
    decision_estadistica_critico_matematicas = "Rechazar H0"
else:
    decision_estadistica_critico_matematicas = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_matematicas}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_matematicas
# Alpha: alpha_matematicas
print(f"\nValor p ({valor_p_matematicas:.4f}) vs Alpha ({alpha_matematicas:.2f})")

if valor_p_matematicas <= alpha_matematicas:
    decision_estadistica_pvalue_matematicas = "Rechazar H0"
else:
    decision_estadistica_pvalue_matematicas = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_matematicas}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_matematicas == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_matematicas:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_matematicas:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_matematicas*100}%,")
    print("para concluir que el promedio poblacional de la clase en matemáticas es diferente de 80.")
else:
    print(f"Dado que el valor p ({valor_p_matematicas:.4f}) es mayor que el nivel de significancia alpha ({alpha_matematicas:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_matematicas*100}%,")
    print("para concluir que el promedio poblacional de la clase en matemáticas es diferente de 80.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el promedio es 80.")

# punto 27 - Visualizar la distribución t de Student

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba t: estadistico_t_matematicas (calculado en un paso anterior)
# Grados de libertad: grados_libertad_matematicas (calculado en un paso anterior)
# Alpha: alpha_matematicas (definido en un paso anterior)
# Valores críticos t: valor_t_critico_inferior_matematicas, valor_t_critico_superior_matematicas (calculados en un paso anterior)

# 2. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x_matematicas = np.linspace(-4, 4, 200)

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_matematicas)
pdf_matematicas = st.t.pdf(x_matematicas, grados_libertad_matematicas)

# 4. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x_matematicas, pdf_matematicas, label=f'Distribución t (df={grados_libertad_matematicas})')

# 5. Agregar líneas verticales en los valores críticos t
plt.axvline(valor_t_critico_inferior_matematicas, color='red', linestyle='--', label=f'Valores Críticos t = {valor_t_critico_inferior_matematicas:.3f}, {valor_t_critico_superior_matematicas:.3f}')
plt.axvline(valor_t_critico_superior_matematicas, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_t_critico_inferior_matematicas
x_rechazo_izquierda_matematicas = np.linspace(-4, valor_t_critico_inferior_matematicas, 100)
pdf_rechazo_izquierda_matematicas = st.t.pdf(x_rechazo_izquierda_matematicas, grados_libertad_matematicas)
plt.fill_between(x_rechazo_izquierda_matematicas, pdf_rechazo_izquierda_matematicas, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.01)')

# La región de rechazo derecha es donde x >= valor_t_critico_superior_matematicas
x_rechazo_derecha_matematicas = np.linspace(valor_t_critico_superior_matematicas, 4, 100)
pdf_rechazo_derecha_matematicas = st.t.pdf(x_rechazo_derecha_matematicas, grados_libertad_matematicas)
plt.fill_between(x_rechazo_derecha_matematicas, pdf_rechazo_derecha_matematicas, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t_matematicas, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t_matematicas:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Regiones de Rechazo y Estadístico de Prueba (Matemáticas)")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

#punto 27 - Determinar el valor p

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba bilateral, el valor p es 2 * P(T >= |estadistico_t_matematicas| | H0 es verdadera)
# o 2 * P(T <= -|estadistico_t_matematicas| | H0 es verdadera)
# Como nuestro estadístico t es negativo, calculamos cdf(estadistico_t_matematicas) para la cola izquierda
# y multiplicamos por 2 para ambas colas.
valor_p_matematicas = 2 * st.t.cdf(estadistico_t_matematicas, grados_libertad_matematicas)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t_matematicas:.3f}")
print(f"Valor p (bilateral): {valor_p_matematicas:.4f}")

# punto 27 - Calcular el estadístico de prueba t

# 1. Definir las variables con los valores proporcionados
# Media muestral del puntaje de la clase de matemáticas
media_muestral_matematicas = 75
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0_matematicas = 80
# Desviación estándar muestral
desviacion_estandar_muestral_matematicas = 8
# Tamaño de la muestra
n_matematicas = 12

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t_matematicas = (media_muestral_matematicas - media_poblacional_h0_matematicas) / (desviacion_estandar_muestral_matematicas / np.sqrt(n_matematicas))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral_matematicas}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0_matematicas}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral_matematicas}")
print(f"Tamaño de la muestra (n): {n_matematicas}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t_matematicas:.3f}")

#punto 27 - Definir las regiones de rechazo

# Los valores críticos t para alpha = 0.01 (bilateral) ya fueron calculados.
# valor_t_critico_inferior_matematicas
# valor_t_critico_superior_matematicas

# Las regiones de rechazo para una prueba bilateral son cuando el estadístico de prueba es menor o igual al valor crítico t inferior O mayor o igual al valor crítico t superior.
region_rechazo_matematicas = f"Regiones de Rechazo: t <= {valor_t_critico_inferior_matematicas:.3f} o t >= {valor_t_critico_superior_matematicas:.3f}"

# Imprimir la descripción de las regiones de rechazo
print(region_rechazo_matematicas)

#punto 27 - Determinar los grados de libertad y los valores críticos t

# 1. Calcular los grados de libertad (df)
# n = 12 (tamaño de la muestra)
n_matematicas = 12
grados_libertad_matematicas = n_matematicas - 1

# 2. Obtener los valores críticos t
# alpha_matematicas = 0.01 (nivel de significancia)
# Para una prueba bilateral (dos colas), alpha se divide en dos: alpha/2.
# Los valores críticos t se buscan en los percentiles alpha/2 y 1 - alpha/2.
alpha_dos_colas_matematicas = alpha_matematicas / 2
valor_t_critico_inferior_matematicas = st.t.ppf(alpha_dos_colas_matematicas, grados_libertad_matematicas)
valor_t_critico_superior_matematicas = st.t.ppf(1 - alpha_dos_colas_matematicas, grados_libertad_matematicas)

# 3. Imprimir los grados de libertad y los valores críticos t
print(f"Grados de libertad (df): {grados_libertad_matematicas}")
print(f"Valor crítico t inferior para alpha/2 = {alpha_dos_colas_matematicas}: {valor_t_critico_inferior_matematicas:.3f}")
print(f"Valor crítico t superior para 1 - alpha/2 = {1 - alpha_dos_colas_matematicas}: {valor_t_critico_superior_matematicas:.3f}")

import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

#punto 27 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar muestral (s = 8) y el tamaño de la muestra (n=12).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba_matematicas = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada_matematicas = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_matematicas}")
print(f"La distribución asociada es: {distribucion_asociada_matematicas}")

#punto 27 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 1%.
alpha_matematicas = 0.01

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_matematicas}")

#punto 27 - Hipótesis para el promedio de la clase en matemáticas

# Definir las hipótesis
# Problema: Un colegio afirma que el promedio de su clase en matemáticas es 80/100.
# Queremos probar si es diferente de 80.

# Hipótesis Nula (H0): El promedio poblacional de la clase en matemáticas es igual a 80.
# μ = 80
hipotesis_nula_matematicas = "H0: μ = 80 (El promedio poblacional de la clase en matemáticas es igual a 80)"

# Hipótesis Alternativa (H1): El promedio poblacional de la clase en matemáticas es diferente de 80.
# μ ≠ 80
hipotesis_alternativa_matematicas = "H1: μ ≠ 80 (El promedio poblacional de la clase en matemáticas es diferente de 80)"

# Imprimir las hipótesis
print("Hipótesis para el promedio de la clase en matemáticas:")
print(hipotesis_nula_matematicas)
print(hipotesis_alternativa_matematicas)



"""**Reasoning**:
Compare the calculated t-statistic with the critical t-value (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average delivery time.
"""

# punto 28 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba t: estadistico_t_consumo
# Valor crítico t: valor_t_critico_consumo
print(f"Estadístico de prueba t ({estadistico_t_consumo:.3f}) vs Valor crítico t ({valor_t_critico_consumo:.3f})")

if estadistico_t_consumo <= valor_t_critico_consumo:
    decision_estadistica_critico_consumo = "Rechazar H0"
else:
    decision_estadistica_critico_consumo = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_consumo}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_consumo
# Alpha: alpha_consumo
print(f"\nValor p ({valor_p_consumo:.4f}) vs Alpha ({alpha_consumo:.2f})")

if valor_p_consumo <= alpha_consumo:
    decision_estadistica_pvalue_consumo = "Rechazar H0"
else:
    decision_estadistica_pvalue_consumo = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_consumo}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_consumo == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_consumo:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_consumo:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_consumo*100}%,")
    print("para concluir que el consumo promedio poblacional de combustible es menor a 15 km/L.")
else:
    print(f"Dado que el valor p ({valor_p_consumo:.4f}) es mayor que el nivel de significancia alpha ({alpha_consumo:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_consumo*100}%,")
    print("para concluir que el consumo promedio poblacional de combustible es menor a 15 km/L.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el consumo promedio es 15 km/L.")

# punto 28 - Visualizar la distribución t de Student

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba t: estadistico_t_consumo (calculado en un paso anterior)
# Grados de libertad: grados_libertad_consumo (calculado en un paso anterior)
# Alpha: alpha_consumo (definido en un paso anterior)
# Valor crítico t: valor_t_critico_consumo (calculado en un paso anterior)

# 2. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x_consumo = np.linspace(-4, 4, 200)

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_consumo)
pdf_consumo = st.t.pdf(x_consumo, grados_libertad_consumo)

# 4. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x_consumo, pdf_consumo, label=f'Distribución t (df={grados_libertad_consumo})')

# 5. Agregar una línea vertical en el valor crítico de t
# Para una prueba unilateral izquierda, el valor crítico es negativo.
plt.axvline(valor_t_critico_consumo, color='red', linestyle='--', label=f'Valor Crítico t = {valor_t_critico_consumo:.3f}')

# 6. Rellenar la región de rechazo (unilateral izquierda)
# La región de rechazo es donde x <= valor_t_critico
x_rechazo_izquierda_consumo = np.linspace(-4, valor_t_critico_consumo, 100)
pdf_rechazo_izquierda_consumo = st.t.pdf(x_rechazo_izquierda_consumo, grados_libertad_consumo)
plt.fill_between(x_rechazo_izquierda_consumo, pdf_rechazo_izquierda_consumo, color='red', alpha=0.3, label='Región de Rechazo (α = 0.05)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t_consumo, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t_consumo:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Región de Rechazo y Estadístico de Prueba (Consumo de Combustible)")

# 9. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 10. Mostrar la gráfica
plt.show()

#punto 28 - Determinar el valor p

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba unilateral izquierda, el valor p es P(T <= estadistico_t_consumo | H0 es verdadera)
valor_p_consumo = st.t.cdf(estadistico_t_consumo, grados_libertad_consumo)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t_consumo:.3f}")
print(f"Valor p (unilateral izquierda): {valor_p_consumo:.4f}")

# punto 28 - Calcular el estadístico de prueba t

# 1. Definir las variables con los valores proporcionados
# Media muestral del consumo de combustible
media_muestral_consumo = 14
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0_consumo = 15
# Desviación estándar muestral
desviacion_estandar_muestral_consumo = 1.2
# Tamaño de la muestra
n_consumo = 10

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t_consumo = (media_muestral_consumo - media_poblacional_h0_consumo) / (desviacion_estandar_muestral_consumo / np.sqrt(n_consumo))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral_consumo}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0_consumo}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral_consumo}")
print(f"Tamaño de la muestra (n): {n_consumo}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t_consumo:.3f}")

"""**Reasoning**:
Define the rejection region for the one-tailed left t-test based on the critical t-value.
"""

#punto 28 - Definir la región de rechazo

# El valor crítico t para alpha = 0.05 (unilateral izquierda) ya fue calculado como valor_t_critico_consumo.

# La región de rechazo para una prueba unilateral izquierda es cuando el estadístico de prueba es menor o igual al valor crítico de t.
region_rechazo_consumo = f"Región de Rechazo: t <= {valor_t_critico_consumo:.3f}"

# Imprimir la descripción de la región de rechazo
print(region_rechazo_consumo)

#punto 28 - Determinar los grados de libertad y el valor crítico t

# 1. Calcular los grados de libertad (df)
# n = 10 (tamaño de la muestra)
n_consumo = 10
grados_libertad_consumo = n_consumo - 1

# 2. Obtener el valor crítico t
# alpha_consumo = 0.05 (nivel de significancia)
# Para una prueba unilateral izquierda, el valor crítico t se busca en el percentil alpha.
valor_t_critico_consumo = st.t.ppf(alpha_consumo, grados_libertad_consumo)

# 3. Imprimir los grados de libertad y el valor crítico t
print(f"Grados de libertad (df): {grados_libertad_consumo}")
print(f"Valor crítico t para alpha = {alpha_consumo} (unilateral izquierda): {valor_t_critico_consumo:.3f}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average car fuel consumption, given that the population standard deviation is unknown and the sample size is small.
"""

#punto 28 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar muestral (s = 1.2 km/L) y el tamaño de la muestra (n=10).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba_consumo = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada_consumo = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_consumo}")
print(f"La distribución asociada es: {distribucion_asociada_consumo}")

#punto 28 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha_consumo = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_consumo}")

#punto 28 - Hipótesis para el consumo promedio de combustible

# Definir las hipótesis
# Problema: Un fabricante asegura que su auto consume 15 km/L.
# Una prueba con 10 autos muestra una media de 14 km/L y s = 1,2 km/L.
# Queremos probar si el consumo promedio real es menor a 15 km/L.

# Hipótesis Nula (H0): El consumo promedio poblacional de combustible es igual a 15 km/L.
# μ = 15 km/L
hipotesis_nula_consumo = "H0: μ = 15 km/L (El consumo promedio poblacional de combustible es igual a 15 km/L)"

# Hipótesis Alternativa (H1): El consumo promedio poblacional de combustible es menor a 15 km/L.
# μ < 15 km/L
hipotesis_alternativa_consumo = "H1: μ < 15 km/L (El consumo promedio poblacional de combustible es menor a 15 km/L)"

# Imprimir las hipótesis
print("Hipótesis para el consumo promedio de combustible:")
print(hipotesis_nula_consumo)
print(hipotesis_alternativa_consumo)

#punto 29 - Hipótesis para el aumento promedio del nivel de hierro

# Definir las hipótesis
# Problema: Un suplemento promete aumentar el nivel de hierro en la sangre en 2 mg/dL.
# Queremos probar si el aumento promedio real es menor a 2 mg/dL.

# Hipótesis Nula (H0): El aumento promedio poblacional del nivel de hierro es igual a 2 mg/dL.
# μ = 2 mg/dL
hipotesis_nula_hierro = "H0: μ = 2 mg/dL (El aumento promedio poblacional del nivel de hierro es igual a 2 mg/dL)"

# Hipótesis Alternativa (H1): El aumento promedio poblacional del nivel de hierro es menor a 2 mg/dL.
# μ < 2 mg/dL
hipotesis_alternativa_hierro = "H1: μ < 2 mg/dL (El aumento promedio poblacional del nivel de hierro es menor a 2 mg/dL)"

# Imprimir las hipótesis
print("Hipótesis para el aumento promedio del nivel de hierro:")
print(hipotesis_nula_hierro)
print(hipotesis_alternativa_hierro)

"""**Reasoning**:
Compare the calculated t-statistic with the critical t-value (or the p-value with alpha) to make a statistical decision about rejecting or not rejecting the null hypothesis. Then, interpret this decision in the practical context of the problem regarding the average delivery time.
"""

# punto 29 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba t: estadistico_t_hierro
# Valor crítico t: valor_t_critico_hierro
print(f"Estadístico de prueba t ({estadistico_t_hierro:.3f}) vs Valor crítico t ({valor_t_critico_hierro:.3f})")

if estadistico_t_hierro <= valor_t_critico_hierro:
    decision_estadistica_critico_hierro = "Rechazar H0"
else:
    decision_estadistica_critico_hierro = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_hierro}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_hierro
# Alpha: alpha_hierro
print(f"\nValor p ({valor_p_hierro:.4f}) vs Alpha ({alpha_hierro:.2f})")

if valor_p_hierro <= alpha_hierro:
    decision_estadistica_pvalue_hierro = "Rechazar H0"
else:
    decision_estadistica_pvalue_hierro = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_hierro}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_hierro == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_hierro:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_hierro:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_hierro*100}%,")
    print("para concluir que el aumento promedio poblacional del nivel de hierro es menor a 2 mg/dL.")
else:
    print(f"Dado que el valor p ({valor_p_hierro:.4f}) es mayor que el nivel de significancia alpha ({alpha_hierro:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_hierro*100}%,")
    print("para concluir que el aumento promedio poblacional del nivel de hierro es menor a 2 mg/dL.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que el aumento promedio es 2 mg/dL.")

# punto 29 - Visualizar la distribución t de Student

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba t: estadistico_t_hierro (calculado en un paso anterior)
# Grados de libertad: grados_libertad_hierro (calculado en un paso anterior)
# Alpha: alpha_hierro (definido en un paso anterior)
# Valor crítico t: valor_t_critico_hierro (calculado en un paso anterior)

# 2. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x_hierro = np.linspace(-4, 4, 200)

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_hierro)
pdf_hierro = st.t.pdf(x_hierro, grados_libertad_hierro)

# 4. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x_hierro, pdf_hierro, label=f'Distribución t (df={grados_libertad_hierro})')

# 5. Agregar una línea vertical en el valor crítico de t
# Para una prueba unilateral izquierda, el valor crítico es negativo.
plt.axvline(valor_t_critico_hierro, color='red', linestyle='--', label=f'Valor Crítico t = {valor_t_critico_hierro:.3f}')

# 6. Rellenar la región de rechazo (unilateral izquierda)
# La región de rechazo es donde x <= valor_t_critico
x_rechazo_izquierda_hierro = np.linspace(-4, valor_t_critico_hierro, 100)
pdf_rechazo_izquierda_hierro = st.t.pdf(x_rechazo_izquierda_hierro, grados_libertad_hierro)
plt.fill_between(x_rechazo_izquierda_hierro, pdf_rechazo_izquierda_hierro, color='red', alpha=0.3, label='Región de Rechazo (α = 0.10)')

# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t_hierro, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t_hierro:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Región de Rechazo y Estadístico de Prueba (Nivel de Hierro)")

# 9. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 10. Mostrar la gráfica
plt.show()

#punto 29 - Determinar el valor p

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba unilateral izquierda, el valor p es P(T <= estadistico_t_hierro | H0 es verdadera)
valor_p_hierro = st.t.cdf(estadistico_t_hierro, grados_libertad_hierro)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t_hierro:.3f}")
print(f"Valor p (unilateral izquierda): {valor_p_hierro:.4f}")

# punto 29 - Calcular el estadístico de prueba t

# 1. Definir las variables con los valores proporcionados
# Media muestral del aumento del nivel de hierro
media_muestral_hierro = 1.5
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0_hierro = 2
# Desviación estándar muestral
desviacion_estandar_muestral_hierro = 0.6
# Tamaño de la muestra
n_hierro = 8

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t_hierro = (media_muestral_hierro - media_poblacional_h0_hierro) / (desviacion_estandar_muestral_hierro / np.sqrt(n_hierro))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral_hierro}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0_hierro}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral_hierro}")
print(f"Tamaño de la muestra (n): {n_hierro}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t_hierro:.3f}")

"""**Reasoning**:
Define the rejection region for the one-tailed left t-test based on the critical t-value.
"""

#punto 29 - Definir la región de rechazo

# El valor crítico t para alpha = 0.10 (unilateral izquierda) ya fue calculado como valor_t_critico_hierro.

# La región de rechazo para una prueba unilateral izquierda es cuando el estadístico de prueba es menor o igual al valor crítico de t.
region_rechazo_hierro = f"Región de Rechazo: t <= {valor_t_critico_hierro:.3f}"

# Imprimir la descripción de la región de rechazo
print(region_rechazo_hierro)

#punto 29 - Determinar los grados de libertad y el valor crítico t

# 1. Calcular los grados de libertad (df)
# n = 8 (tamaño de la muestra)
n_hierro = 8
grados_libertad_hierro = n_hierro - 1

# 2. Obtener el valor crítico t
# alpha_hierro = 0.10 (nivel de significancia)
# Para una prueba unilateral izquierda, el valor crítico t se busca en el percentil alpha.
valor_t_critico_hierro = st.t.ppf(alpha_hierro, grados_libertad_hierro)

# 3. Imprimir los grados de libertad y el valor crítico t
print(f"Grados de libertad (df): {grados_libertad_hierro}")
print(f"Valor crítico t para alpha = {alpha_hierro} (unilateral izquierda): {valor_t_critico_hierro:.3f}")

"""**Reasoning**:
Determine the appropriate test statistic and its distribution for the hypothesis test on the average increase in blood iron level, given that the population standard deviation is unknown and the sample size is small.
"""

import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

#punto 29 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar muestral (s = 0.6 mg/dL) y el tamaño de la muestra (n=8).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba_hierro = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada_hierro = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_hierro}")
print(f"La distribución asociada es: {distribucion_asociada_hierro}")

#punto 29 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 10%.
alpha_hierro = 0.10

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_hierro}")

#punto 30 - Hipótesis para la duración promedio de los focos

# Definir las hipótesis
# Problema: Un fabricante asegura que sus focos duran 10,000 horas.
# Una prueba con 20 focos muestra una media de 9,800 horas con s = 300 horas.
# Queremos probar si hay evidencia de que la duración promedio real es diferente a 10,000 horas.

# Hipótesis Nula (H0): La duración promedio poblacional de los focos es igual a 10,000 horas.
# μ = 10,000 horas
hipotesis_nula_focos = "H0: μ = 10,000 horas (La duración promedio poblacional es igual a 10,000 horas)"

# Hipótesis Alternativa (H1): La duración promedio poblacional de los focos es diferente a 10,000 horas.
# μ ≠ 10,000 horas
hipotesis_alternativa_focos = "H1: μ ≠ 10,000 horas (La duración promedio poblacional es diferente a 10,000 horas)"

# Imprimir las hipótesis
print("Hipótesis para la duración promedio de los focos:")
print(hipotesis_nula_focos)
print(hipotesis_alternativa_focos)

#punto 30 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha_focos = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_focos}")

"""## Identificar el estadístico de prueba y su distribución

### Subtask:
Determinar qué estadístico de prueba es apropiado para este escenario (prueba t para la media con desviación estándar poblacional desconocida) y su distribución.
"""

#punto 30 - Identificar el estadístico de prueba y su distribución

# En este problema, se nos da la desviación estándar muestral (s = 300 horas) y el tamaño de la muestra (n=20).
# La desviación estándar poblacional es desconocida.
# El tamaño de la muestra es menor a 30.
# Por lo tanto, para probar la media poblacional, el estadístico de prueba apropiado es el estadístico t.
estadistico_prueba_focos = "Estadístico t (t-student)"

# La distribución asociada con el estadístico t cuando la desviación estándar poblacional es desconocida
# y la muestra es pequeña (o cuando se utiliza la desviación estándar muestral) es la distribución t de Student.
distribucion_asociada_focos = "Distribución t de Student"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_focos}")
print(f"La distribución asociada es: {distribucion_asociada_focos}")

"""## Determinar los grados de libertad y el valor crítico

### Subtask:
Calcular los grados de libertad y determinar el valor crítico de t para el nivel de significancia y el tipo de prueba (bilateral).
"""

#punto 30 - Determinar los grados de libertad y los valores críticos t

import numpy as np
import scipy.stats as st

# 1. Calcular los grados de libertad (df)
# n = 20 (tamaño de la muestra)
n_focos = 20
grados_libertad_focos = n_focos - 1

# 2. Obtener los valores críticos t
# alpha_focos = 0.05 (nivel de significancia)
# Para una prueba bilateral (dos colas), alpha se divide en dos: alpha/2.
# Los valores críticos t se buscan en los percentiles alpha/2 y 1 - alpha/2.
alpha_dos_colas_focos = alpha_focos / 2
valor_t_critico_inferior_focos = st.t.ppf(alpha_dos_colas_focos, grados_libertad_focos)
valor_t_critico_superior_focos = st.t.ppf(1 - alpha_dos_colas_focos, grados_libertad_focos)

# 3. Imprimir los grados de libertad y los valores críticos t
print(f"Grados de libertad (df): {grados_libertad_focos}")
print(f"Valor crítico t inferior para alpha/2 = {alpha_dos_colas_focos}: {valor_t_critico_inferior_focos:.3f}")
print(f"Valor crítico t superior para 1 - alpha/2 = {1 - alpha_dos_colas_focos}: {valor_t_critico_superior_focos:.3f}")

"""## Definir las regiones de rechazo

### Subtask:
Definir las regiones de rechazo para la prueba de hipótesis bilateral.
"""

#punto 30 - Definir las regiones de rechazo

# Los valores críticos t para alpha = 0.05 (bilateral) ya fueron calculados.
# valor_t_critico_inferior_focos
# valor_t_critico_superior_focos

# Las regiones de rechazo para una prueba bilateral son cuando el estadístico de prueba es menor o igual al valor crítico t inferior O mayor o igual al valor crítico t superior.
region_rechazo_focos = f"Regiones de Rechazo: t <= {valor_t_critico_inferior_focos:.3f} o t >= {valor_t_critico_superior_focos:.3f}"

# Imprimir la descripción de las regiones de rechazo
print(region_rechazo_focos)

"""## Calcular el estadístico de prueba

### Subtask:
Calcular el valor del estadístico t utilizando la media muestral, la media poblacional hipotetizada, la desviación estándar muestral y el tamaño de la muestra.
"""

# punto 30 - Calcular el estadístico de prueba t

import numpy as np
import scipy.stats as st

# 1. Definir las variables con los valores proporcionados
# Media muestral de la duración de los focos
media_muestral_focos = 9800
# Media poblacional hipotetizada bajo la hipótesis nula
media_poblacional_h0_focos = 10000
# Desviación estándar muestral
desviacion_estandar_muestral_focos = 300
# Tamaño de la muestra
n_focos = 20

# 2. Calcular el valor del estadístico t
# Fórmula: t = (media muestral - media poblacional hipotetizada) / (desviación estándar muestral / sqrt(n))
estadistico_t_focos = (media_muestral_focos - media_poblacional_h0_focos) / (desviacion_estandar_muestral_focos / np.sqrt(n_focos))

# 3. Imprimir el valor calculado del estadístico de prueba t
print(f"Media muestral: {media_muestral_focos}")
print(f"Media poblacional hipotetizada (H0): {media_poblacional_h0_focos}")
print(f"Desviación estándar muestral: {desviacion_estandar_muestral_focos}")
print(f"Tamaño de la muestra (n): {n_focos}")
print(f"\nEl valor del estadístico de prueba t es: {estadistico_t_focos:.3f}")

"""## Calcular el valor p

### Subtask:
Determinar el valor p asociado al estadístico de prueba calculado.
"""

#punto 30 - Determinar el valor p

import scipy.stats as st

# Utilizar la función scipy.stats.t.cdf() para calcular el valor p.
# Para una prueba bilateral, el valor p es 2 * P(T >= |estadistico_t_focos| | H0 es verdadera)
# o 2 * P(T <= -|estadistico_t_focos| | H0 es verdadera)
# Como nuestro estadístico t es negativo, calculamos cdf(estadistico_t_focos) para la cola izquierda
# y multiplicamos por 2 para ambas colas.
valor_p_focos = 2 * st.t.cdf(estadistico_t_focos, grados_libertad_focos)

# Imprimir el estadístico t y el valor p
print(f"Estadístico de prueba t: {estadistico_t_focos:.3f}")
print(f"Valor p (bilateral): {valor_p_focos:.4f}")

"""## Graficar la distribución y la región de rechazo

### Subtask:
Visualizar la distribución t de Student, indicando los valores críticos, las regiones de rechazo y la posición del estadístico de prueba calculado.
"""

# punto 30 - Visualizar la distribución t de Student

import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba t: estadistico_t_focos (calculado en un paso anterior)
# Grados de libertad: grados_libertad_focos (calculado en un paso anterior)
# Alpha: alpha_focos (definido en un paso anterior)
# Valores críticos t: valor_t_critico_inferior_focos, valor_t_critico_superior_focos (calculados en un paso anterior)

# 2. Crear un rango de valores para el eje x
# Un rango común para la distribución t es de -4 a 4, ajusta si es necesario.
x_focos = np.linspace(-4, 4, 200)

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_focos)
pdf_focos = st.t.pdf(x_focos, grados_libertad_focos)

# 4. Crear la gráfica de la distribución t de Student
plt.figure(figsize=(10, 6))
plt.plot(x_focos, pdf_focos, label=f'Distribución t (df={grados_libertad_focos})')

# 5. Agregar líneas verticales en los valores críticos t
plt.axvline(valor_t_critico_inferior_focos, color='red', linestyle='--', label=f'Valores Críticos t = {valor_t_critico_inferior_focos:.3f}, {valor_t_critico_superior_focos:.3f}')
plt.axvline(valor_t_critico_superior_focos, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_t_critico_inferior
x_rechazo_izquierda_focos = np.linspace(-4, valor_t_critico_inferior_focos, 100)
pdf_rechazo_izquierda_focos = st.t.pdf(x_rechazo_izquierda_focos, grados_libertad_focos)
plt.fill_between(x_rechazo_izquierda_focos, pdf_rechazo_izquierda_focos, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.05)')

# La región de rechazo derecha es donde x >= valor_t_critico_superior
x_rechazo_derecha_focos = np.linspace(valor_t_critico_superior_focos, 4, 100)
pdf_rechazo_derecha_focos = st.t.pdf(x_rechazo_derecha_focos, grados_libertad_focos)
plt.fill_between(x_rechazo_derecha_focos, pdf_rechazo_derecha_focos, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_t_focos, color='green', linestyle='-', label=f'Estadístico de Prueba t = {estadistico_t_focos:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor t")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución t de Student, Regiones de Rechazo y Estadístico de Prueba (Duración de Focos)")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula
plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""## Tomar una decisión estadística y concluir

### Subtask:
Comparar el estadístico de prueba con los valores críticos (o el valor p con alpha) y tomar una decisión sobre si rechazar o no la hipótesis nula. Luego, interpretar la decisión en el contexto práctico del problema.
"""

# punto 30 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con los valores críticos
# Estadístico de prueba t: estadistico_t_focos
# Valores críticos t: valor_t_critico_inferior_focos, valor_t_critico_superior_focos
print(f"Estadístico de prueba t ({estadistico_t_focos:.3f}) vs Valores críticos t ({valor_t_critico_inferior_focos:.3f}, {valor_t_critico_superior_focos:.3f})")

if estadistico_t_focos <= valor_t_critico_inferior_focos or estadistico_t_focos >= valor_t_critico_superior_focos:
    decision_estadistica_critico_focos = "Rechazar H0"
else:
    decision_estadistica_critico_focos = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_focos}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_focos
# Alpha: alpha_focos
print(f"\nValor p ({valor_p_focos:.4f}) vs Alpha ({alpha_focos:.2f})")

if valor_p_focos <= alpha_focos:
    decision_estadistica_pvalue_focos = "Rechazar H0"
else:
    decision_estadistica_pvalue_focos = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_focos}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_focos == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_focos:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_focos:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_focos*100}%,")
    print("para concluir que la duración promedio poblacional de los focos es diferente a 10,000 horas.")
else:
    print(f"Dado que el valor p ({valor_p_focos:.4f}) es mayor que el nivel de significancia alpha ({alpha_focos:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_focos*100}%,")
    print("para concluir que la duración promedio poblacional de los focos es diferente a 10,000 horas.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que la duración promedio es 10,000 horas.")

#punto 31 - Hipótesis para la varianza del tiempo de duración de las llamadas

# Definir las hipótesis
# Problema: Una compañía de telefonía afirma que la varianza del tiempo de duración de las llamadas es de σ^2 = 2.5 minutos^2.
# Queremos probar si la varianza poblacional difiere de 2.5 minutos^2.

# Hipótesis Nula (H0): La varianza poblacional del tiempo de duración de las llamadas es igual a 2.5 minutos^2.
# σ^2 = 2.5
hipotesis_nula_varianza = "H0: σ^2 = 2.5 minutos^2 (La varianza poblacional es igual a 2.5 minutos^2)"

# Hipótesis Alternativa (H1): La varianza poblacional del tiempo de duración de las llamadas es diferente a 2.5 minutos^2.
# σ^2 ≠ 2.5
hipotesis_alternativa_varianza = "H1: σ^2 ≠ 2.5 minutos^2 (La varianza poblacional es diferente a 2.5 minutos^2)"

# Imprimir las hipótesis
print("Hipótesis para la varianza del tiempo de duración de las llamadas:")
print(hipotesis_nula_varianza)
print(hipotesis_alternativa_varianza)

#punto 31 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 5%.
alpha_varianza = 0.05

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_varianza}")

"""## Identificar el estadístico de prueba y su distribución

### Subtask:
Determinar qué estadístico de prueba es apropiado para este escenario (prueba de Chi-cuadrado para la varianza) y su distribución.
"""

#punto 31 - Identificar el estadístico de prueba y su distribución

# Para probar una hipótesis sobre la varianza poblacional, se utiliza el estadístico Chi-cuadrado (χ²).
estadistico_prueba_varianza = "Estadístico Chi-cuadrado (χ²)"

# La distribución asociada con el estadístico Chi-cuadrado es la distribución Chi-cuadrado (χ²) con n-1 grados de libertad.
distribucion_asociada_varianza = "Distribución Chi-cuadrado (χ²)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_varianza}")
print(f"La distribución asociada es: {distribucion_asociada_varianza}")

"""## Determinar los grados de libertad y los valores críticos

### Subtask:
Calcular los grados de libertad y determinar los valores críticos de Chi-cuadrado para el nivel de significancia y el tipo de prueba (bilateral).
"""

#punto 31 - Determinar los grados de libertad y los valores críticos Chi-cuadrado

import numpy as np
import scipy.stats as st

# 1. Definir las variables con los valores proporcionados
# Tamaño de la muestra
n_varianza = 16
# Nivel de significancia
alpha_varianza = 0.05

# 2. Calcular los grados de libertad (df)
grados_libertad_varianza = n_varianza - 1

# 3. Obtener los valores críticos Chi-cuadrado para una prueba bilateral
# Para una prueba bilateral (dos colas), alpha se divide en dos: alpha/2.
# El valor crítico inferior se busca en el percentil alpha/2.
# El valor crítico superior se busca en el percentil 1 - alpha/2.
alpha_dos_colas_varianza = alpha_varianza / 2
valor_chi2_critico_inferior = st.chi2.ppf(alpha_dos_colas_varianza, grados_libertad_varianza)
valor_chi2_critico_superior = st.chi2.ppf(1 - alpha_dos_colas_varianza, grados_libertad_varianza)

# 4. Imprimir los grados de libertad y los valores críticos Chi-cuadrado
print(f"Grados de libertad (df): {grados_libertad_varianza}")
print(f"Valor crítico Chi-cuadrado inferior para alpha/2 = {alpha_dos_colas_varianza}: {valor_chi2_critico_inferior:.3f}")
print(f"Valor crítico Chi-cuadrado superior para 1 - alpha/2 = {1 - alpha_dos_colas_varianza}: {valor_chi2_critico_superior:.3f}")

"""## Definir las regiones de rechazo

### Subtask:
Definir las regiones de rechazo para la prueba de hipótesis bilateral de Chi-cuadrado.
"""

#punto 31 - Definir las regiones de rechazo

# Los valores críticos Chi-cuadrado para alpha = 0.05 (bilateral) ya fueron calculados.
# valor_chi2_critico_inferior
# valor_chi2_critico_superior

# Las regiones de rechazo para una prueba bilateral son cuando el estadístico de prueba es menor o igual al valor crítico Chi-cuadrado inferior O mayor o igual al valor crítico Chi-cuadrado superior.
region_rechazo_varianza = f"Regiones de Rechazo: χ² <= {valor_chi2_critico_inferior:.3f} o χ² >= {valor_chi2_critico_superior:.3f}"

# Imprimir la descripción de las regiones de rechazo
print(region_rechazo_varianza)

"""## Calcular el estadístico de prueba

### Subtask:
Calcular el valor del estadístico Chi-cuadrado utilizando la varianza muestral, la varianza poblacional hipotetizada y el tamaño de la muestra.
"""

# punto 31 - Calcular el estadístico de prueba Chi-cuadrado

import numpy as np

# 1. Definir las variables con los valores proporcionados
# Varianza muestral
varianza_muestral = 4
# Varianza poblacional hipotetizada bajo la hipótesis nula
varianza_poblacional_h0 = 2.5
# Tamaño de la muestra
n_varianza = 16

# 2. Calcular el valor del estadístico Chi-cuadrado
# Fórmula: χ² = ((n - 1) * s²) / σ²
estadistico_chi2 = ((n_varianza - 1) * varianza_muestral) / varianza_poblacional_h0

# 3. Imprimir el valor calculado del estadístico de prueba Chi-cuadrado
print(f"Varianza muestral (s²): {varianza_muestral}")
print(f"Varianza poblacional hipotetizada (H0): {varianza_poblacional_h0}")
print(f"Tamaño de la muestra (n): {n_varianza}")
print(f"\nEl valor del estadístico de prueba Chi-cuadrado es: {estadistico_chi2:.3f}")

"""## Calcular el valor p

### Subtask:
Determinar el valor p asociado al estadístico de prueba Chi-cuadrado calculado.
"""

#punto 31 - Determinar el valor p

import scipy.stats as st

# Utilizar la función scipy.stats.chi2.cdf() para calcular el valor p.
# Para una prueba bilateral, el valor p es la suma de las áreas de las colas más extremas que el estadístico Chi-cuadrado.
# Si el estadístico Chi-cuadrado está a la izquierda del centro, el valor p es 2 * P(χ² <= estadistico_chi2).
# Si el estadístico Chi-cuadrado está a la derecha del centro, el valor p es 2 * P(χ² >= estadistico_chi2) = 2 * (1 - P(χ² < estadistico_chi2)).
# El centro de la distribución Chi-cuadrado es aproximadamente igual a los grados de libertad para df > 2.

# En este caso, df = 15. El estadístico chi2 = 24.
# El estadístico está a la derecha del centro (15).
valor_p_varianza = 2 * (1 - st.chi2.cdf(estadistico_chi2, grados_libertad_varianza))

# Sin embargo, para una prueba bilateral, es más preciso calcular el área de la cola a partir del estadístico de prueba
# y duplicarla si el estadístico está en el "lado" menos probable, o simplemente sumar las dos áreas de cola si se
# compara con los valores críticos.
# Dado que es una prueba bilateral, el valor p es el doble del área de la cola más extrema que el estadístico de prueba.
# El estadístico calculado es 24, el centro de la distribución es 15 (grados de libertad). La cola relevante es la derecha.
valor_p_cola_derecha = 1 - st.chi2.cdf(estadistico_chi2, grados_libertad_varianza)
valor_p_varianza_bilateral = 2 * valor_p_cola_derecha


# Imprimir el estadístico Chi-cuadrado y el valor p
print(f"Estadístico de prueba χ²: {estadistico_chi2:.3f}")
print(f"Valor p (bilateral): {valor_p_varianza_bilateral:.4f}")

"""## Graficar la distribución y la región de rechazo

### Subtask:
Visualizar la distribución Chi-cuadrado, indicando los valores críticos, las regiones de rechazo y la posición del estadístico de prueba calculado.
"""

# punto 31 - Visualizar la distribución Chi-cuadrado

import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba Chi-cuadrado: estadistico_chi2 (calculado en un paso anterior)
# Grados de libertad: grados_libertad_varianza (calculado en un paso anterior)
# Alpha: alpha_varianza (definido en un paso anterior)
# Valores críticos Chi-cuadrado: valor_chi2_critico_inferior, valor_chi2_critico_superior (calculados en un paso anterior)

# 2. Crear un rango de valores para el eje x (valores Chi-cuadrado)
# La distribución Chi-cuadrado es asimétrica y solo toma valores no negativos.
# Ajusta el rango superior para que sea lo suficientemente grande para incluir el estadístico y el valor crítico superior.
x_chi2 = np.linspace(0, max(estadistico_chi2 + 5, valor_chi2_critico_superior + 5), 300) # Ajustar el rango superior

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_varianza)
pdf_chi2 = st.chi2.pdf(x_chi2, grados_libertad_varianza)

# 4. Crear la gráfica de la distribución Chi-cuadrado
plt.figure(figsize=(10, 6))
plt.plot(x_chi2, pdf_chi2, label=f'Distribución χ² (df={grados_libertad_varianza})')

# 5. Agregar líneas verticales en los valores críticos Chi-cuadrado
plt.axvline(valor_chi2_critico_inferior, color='red', linestyle='--', label=f'Valores Críticos χ² = {valor_chi2_critico_inferior:.3f}, {valor_chi2_critico_superior:.3f}')
plt.axvline(valor_chi2_critico_superior, color='red', linestyle='--')

# 6. Rellenar las regiones de rechazo (bilateral)
# La región de rechazo izquierda es donde x <= valor_chi2_critico_inferior
x_rechazo_izquierda_chi2 = np.linspace(0, valor_chi2_critico_inferior, 100)
pdf_rechazo_izquierda_chi2 = st.chi2.pdf(x_rechazo_izquierda_chi2, grados_libertad_varianza)
plt.fill_between(x_rechazo_izquierda_chi2, pdf_rechazo_izquierda_chi2, color='red', alpha=0.3, label='Regiones de Rechazo (α = 0.05)')

# La región de rechazo derecha es donde x >= valor_chi2_critico_superior
x_rechazo_derecha_chi2 = np.linspace(valor_chi2_critico_superior, x_chi2[-1], 100) # Usar el límite superior del eje x
pdf_rechazo_derecha_chi2 = st.chi2.pdf(x_rechazo_derecha_chi2, grados_libertad_varianza)
plt.fill_between(x_rechazo_derecha_chi2, pdf_rechazo_derecha_chi2, color='red', alpha=0.3)


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_chi2, color='green', linestyle='-', label=f'Estadístico de Prueba χ² = {estadistico_chi2:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor χ²")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Chi-cuadrado, Regiones de Rechazo y Estadístico de Prueba (Varianza Llamadas)")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula (opcional, puede saturar la gráfica Chi-cuadrado)
# plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""## Tomar una decisión estadística y concluir

### Subtask:
Comparar el estadístico de prueba con los valores críticos (o el valor p con alpha) y tomar una decisión sobre si rechazar o no la hipótesis nula. Luego, interpretar la decisión en el contexto práctico del problema.
"""

# punto 31 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con los valores críticos
# Estadístico de prueba Chi-cuadrado: estadistico_chi2
# Valores críticos Chi-cuadrado: valor_chi2_critico_inferior, valor_chi2_critico_superior
print(f"Estadístico de prueba χ² ({estadistico_chi2:.3f}) vs Valores críticos χ² ({valor_chi2_critico_inferior:.3f}, {valor_chi2_critico_superior:.3f})")

if estadistico_chi2 <= valor_chi2_critico_inferior or estadistico_chi2 >= valor_chi2_critico_superior:
    decision_estadistica_critico_varianza = "Rechazar H0"
else:
    decision_estadistica_critico_varianza = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_varianza}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_varianza_bilateral
# Alpha: alpha_varianza
print(f"\nValor p ({valor_p_varianza_bilateral:.4f}) vs Alpha ({alpha_varianza:.2f})")

if valor_p_varianza_bilateral <= alpha_varianza:
    decision_estadistica_pvalue_varianza = "Rechazar H0"
else:
    decision_estadistica_pvalue_varianza = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_varianza}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_varianza == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_varianza_bilateral:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_varianza:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_varianza*100}%,")
    print("para concluir que la varianza poblacional del tiempo de duración de las llamadas es diferente a 2.5 minutos^2.")
else:
    print(f"Dado que el valor p ({valor_p_varianza_bilateral:.4f}) es mayor que el nivel de significancia alpha ({alpha_varianza:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_varianza*100}%,")
    print("para concluir que la varianza poblacional del tiempo de duración de las llamadas es diferente a 2.5 minutos^2.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que la varianza es 2.5 minutos^2.")

"""## Establecer el nivel de significancia

### Subtask:
Identificar el valor de alpha (α) dado en el problema.

## Summary:

### Data Analysis Key Findings

* The null hypothesis (\$\text{H}_0\$) is that the average population lifetime of the light bulbs is 10,000 hours, while the alternative hypothesis (\$\text{H}_1\$) is that the average population lifetime is different from 10,000 hours.
* The chosen significance level (\$\alpha\$) for this test is 0.05.
* Since the population standard deviation is unknown and the sample size (\(n=20\)) is less than 30, the appropriate test statistic is the t-score, which follows a Student's t-distribution with \(n-1 = 19\) degrees of freedom.
* For a two-tailed test with \$\alpha = 0.05\$, the significance level is split into two tails (\$\alpha/2 = 0.025\$). The critical t-values for this test with 19 degrees of freedom are approximately -2.093 and 2.093. The rejection regions are when the test statistic is less than or equal to -2.093 or greater than or equal to 2.093.
* The calculated t-test statistic based on the sample data (\(n=20\), sample mean = 9800 hours, sample standard deviation = 300 hours) is approximately -2.981.
* The calculated p-value for this two-tailed test is approximately 0.0075.
* Comparing the test statistic (-2.981) to the critical values (-2.093 and 2.093), the test statistic falls within the rejection region (-2.981 $\le$ -2.093).
* Comparing the p-value (0.0075) to alpha (0.05), the p-value is less than alpha (0.0075 $\le$ 0.05).
* Based on both comparisons, the statistical decision is to **reject the null hypothesis (\$\text{H}_0\$)**.

### Insights or Next Steps

* The analysis provides strong statistically significant evidence, at a 5% significance level, to conclude that the average lifetime of the light bulbs is **different** from 10,000 hours.
* Specifically, since the sample mean (9800 hours) is less than 10,000 hours and the test is statistically significant, there is evidence to suggest that the average lifetime is **less** than the manufacturer's claim.
* The manufacturer should investigate the production process to identify the cause for the shorter average lifetime and take corrective actions to meet the claimed 10,000-hour average. Further quality control testing should be implemented after any adjustments.
"""

#punto 32 - Hipótesis para la varianza del llenado de botellas

# Definir las hipótesis
# Problema: Una máquina embotelladora debe mantener la varianza del llenado en σ^2 = 1.2 ml^2.
# Queremos probar si la varianza poblacional es mayor a 1.2 ml^2.

# Hipótesis Nula (H0): La varianza poblacional del llenado es igual a 1.2 ml^2.
# σ^2 = 1.2
hipotesis_nula_embotelladora = "H0: σ^2 = 1.2 ml^2 (La varianza poblacional del llenado es igual a 1.2 ml^2)"

# Hipótesis Alternativa (H1): La varianza poblacional del llenado es mayor a 1.2 ml^2.
# σ^2 > 1.2
hipotesis_alternativa_embotelladora = "H1: σ^2 > 1.2 ml^2 (La varianza poblacional del llenado es mayor a 1.2 ml^2)"

# Imprimir las hipótesis
print("Hipótesis para la varianza del llenado de botellas:")
print(hipotesis_nula_embotelladora)
print(hipotesis_alternativa_embotelladora)

#punto 32 - Establecer el nivel de significancia

# El problema especifica que la prueba se debe realizar con un nivel de significancia (alpha) del 1%.
alpha_embotelladora = 0.01

# Imprimir el valor de alpha
print(f"El nivel de significancia (alpha) es: {alpha_embotelladora}")

"""## Identificar el estadístico de prueba y su distribución

### Subtask:
Determinar qué estadístico de prueba es apropiado para este escenario (prueba de Chi-cuadrado para la varianza) y su distribución.
"""

#punto 32 - Identificar el estadístico de prueba y su distribución

# Para probar una hipótesis sobre la varianza poblacional, se utiliza el estadístico Chi-cuadrado (χ²).
estadistico_prueba_embotelladora = "Estadístico Chi-cuadrado (χ²)"

# La distribución asociada con el estadístico Chi-cuadrado es la distribución Chi-cuadrado (χ²) con n-1 grados de libertad.
distribucion_asociada_embotelladora = "Distribución Chi-cuadrado (χ²)"

# Imprimir el estadístico de prueba y su distribución
print(f"El estadístico de prueba apropiado es: {estadistico_prueba_embotelladora}")
print(f"La distribución asociada es: {distribucion_asociada_embotelladora}")

"""## Determinar los grados de libertad y el valor crítico

### Subtask:
Calcular los grados de libertad y determinar el valor crítico de Chi-cuadrado para el nivel de significancia y el tipo de prueba (unilateral derecha).
"""

#punto 32 - Determinar los grados de libertad y el valor crítico Chi-cuadrado

import numpy as np
import scipy.stats as st

# 1. Definir las variables con los valores proporcionados
# Tamaño de la muestra
n_embotelladora = 20
# Nivel de significancia
alpha_embotelladora = 0.01

# 2. Calcular los grados de libertad (df)
grados_libertad_embotelladora = n_embotelladora - 1

# 3. Obtener el valor crítico Chi-cuadrado para una prueba unilateral derecha
# Para una prueba unilateral derecha, el valor crítico se busca en el percentil 1 - alpha.
valor_chi2_critico_embotelladora = st.chi2.ppf(1 - alpha_embotelladora, grados_libertad_embotelladora)

# 4. Imprimir los grados de libertad y el valor crítico Chi-cuadrado
print(f"Grados de libertad (df): {grados_libertad_embotelladora}")
print(f"Valor crítico Chi-cuadrado para alpha = {alpha_embotelladora} (unilateral derecha): {valor_chi2_critico_embotelladora:.3f}")

"""## Definir la región de rechazo

### Subtask:
Definir la región de rechazo para la prueba de hipótesis unilateral derecha de Chi-cuadrado.
"""

#punto 32 - Definir la región de rechazo

# El valor crítico Chi-cuadrado para alpha = 0.01 (unilateral derecha) ya fue calculado como valor_chi2_critico_embotelladora.

# La región de rechazo para una prueba unilateral derecha es cuando el estadístico de prueba es mayor o igual al valor crítico Chi-cuadrado.
region_rechazo_embotelladora = f"Región de Rechazo: χ² >= {valor_chi2_critico_embotelladora:.3f}"

# Imprimir la descripción de la región de rechazo
print(region_rechazo_embotelladora)

"""## Calcular el estadístico de prueba

### Subtask:
Calcular el valor del estadístico Chi-cuadrado utilizando la varianza muestral, la varianza poblacional hipotetizada y el tamaño de la muestra.
"""

# punto 32 - Calcular el estadístico de prueba Chi-cuadrado

import numpy as np

# 1. Definir las variables con los valores proporcionados
# Varianza muestral
varianza_muestral_embotelladora = 2.0
# Varianza poblacional hipotetizada bajo la hipótesis nula
varianza_poblacional_h0_embotelladora = 1.2
# Tamaño de la muestra
n_embotelladora = 20

# 2. Calcular el valor del estadístico Chi-cuadrado
# Fórmula: χ² = ((n - 1) * s²) / σ²
estadistico_chi2_embotelladora = ((n_embotelladora - 1) * varianza_muestral_embotelladora) / varianza_poblacional_h0_embotelladora

# 3. Imprimir el valor calculado del estadístico de prueba Chi-cuadrado
print(f"Varianza muestral (s²): {varianza_muestral_embotelladora}")
print(f"Varianza poblacional hipotetizada (H0): {varianza_poblacional_h0_embotelladora}")
print(f"Tamaño de la muestra (n): {n_embotelladora}")
print(f"\nEl valor del estadístico de prueba Chi-cuadrado es: {estadistico_chi2_embotelladora:.3f}")

"""## Calcular el valor p

### Subtask:
Determinar el valor p asociado al estadístico de prueba Chi-cuadrado calculado.
"""

#punto 32 - Determinar el valor p

import scipy.stats as st

# Utilizar la función scipy.stats.chi2.cdf() para calcular el valor p.
# Para una prueba unilateral derecha, el valor p es P(χ² >= estadistico_chi2_embotelladora | H0 es verdadera)
# Esto es igual a 1 - P(χ² < estadistico_chi2_embotelladora | H0 es verdadera)
valor_p_embotelladora = 1 - st.chi2.cdf(estadistico_chi2_embotelladora, grados_libertad_embotelladora)

# Imprimir el estadístico Chi-cuadrado y el valor p
print(f"Estadístico de prueba χ²: {estadistico_chi2_embotelladora:.3f}")
print(f"Valor p (unilateral derecha): {valor_p_embotelladora:.4f}")

"""## Graficar la distribución y la región de rechazo

### Subtask:
Visualizar la distribución Chi-cuadrado, indicando el valor crítico, la región de rechazo y la posición del estadístico de prueba calculado.
"""

# punto 32 - Visualizar la distribución Chi-cuadrado

import numpy as np
import scipy.stats as st
import matplotlib.pyplot as plt

# 1. Definir las variables con los valores proporcionados o calculados
# Estadístico de prueba Chi-cuadrado: estadistico_chi2_embotelladora (calculado en un paso anterior)
# Grados de libertad: grados_libertad_embotelladora (calculado en un paso anterior)
# Alpha: alpha_embotelladora (definido en un paso anterior)
# Valor crítico Chi-cuadrado: valor_chi2_critico_embotelladora (calculado en un paso anterior)

# 2. Crear un rango de valores para el eje x (valores Chi-cuadrado)
# La distribución Chi-cuadrado es asimétrica y solo toma valores no negativos.
# Ajusta el rango superior para que sea lo suficientemente grande para incluir el estadístico y el valor crítico.
x_chi2_embotelladora = np.linspace(0, max(estadistico_chi2_embotelladora + 5, valor_chi2_critico_embotelladora + 5), 300) # Ajustar el rango superior

# 3. Calcular la función de densidad de probabilidad (PDF)
# Utilizar los grados de libertad calculados previamente (grados_libertad_embotelladora)
pdf_chi2_embotelladora = st.chi2.pdf(x_chi2_embotelladora, grados_libertad_embotelladora)

# 4. Crear la gráfica de la distribución Chi-cuadrado
plt.figure(figsize=(10, 6))
plt.plot(x_chi2_embotelladora, pdf_chi2_embotelladora, label=f'Distribución χ² (df={grados_libertad_embotelladora})')

# 5. Agregar una línea vertical en el valor crítico Chi-cuadrado
plt.axvline(valor_chi2_critico_embotelladora, color='red', linestyle='--', label=f'Valor Crítico χ² = {valor_chi2_critico_embotelladora:.3f}')

# 6. Rellenar la región de rechazo (unilateral derecha)
# La región de rechazo es donde x >= valor_chi2_critico
x_rechazo_derecha_embotelladora = np.linspace(valor_chi2_critico_embotelladora, x_chi2_embotelladora[-1], 100) # Usar el límite superior del eje x
pdf_rechazo_derecha_embotelladora = st.chi2.pdf(x_rechazo_derecha_embotelladora, grados_libertad_embotelladora)
plt.fill_between(x_rechazo_derecha_embotelladora, pdf_rechazo_derecha_embotelladora, color='red', alpha=0.3, label='Región de Rechazo (α = 0.01)')


# 7. Agregar una línea vertical en la posición del estadístico de prueba
plt.axvline(estadistico_chi2_embotelladora, color='green', linestyle='-', label=f'Estadístico de Prueba χ² = {estadistico_chi2_embotelladora:.3f}')

# 8. Añadir etiquetas y título
plt.xlabel("Valor χ²")
plt.ylabel("Densidad de Probabilidad")
plt.title("Distribución Chi-cuadrado, Región de Rechazo y Estadístico de Prueba (Varianza Embotelladora)")

# 10. Añadir una leyenda
plt.legend()

# Añadir una cuadrícula (opcional)
# plt.grid(True, linestyle='--', alpha=0.6)

# 11. Mostrar la gráfica
plt.show()

"""## Tomar una decisión estadística y concluir

### Subtask:
Comparar el estadístico de prueba con el valor crítico (o el valor p con alpha) y tomar una decisión sobre si rechazar o no la hipótesis nula. Luego, interpretar la decisión en el contexto práctico del problema.
"""

# punto 32 - Tomar una decisión estadística y concluir

# 1. Comparar el estadístico de prueba con el valor crítico
# Estadístico de prueba Chi-cuadrado: estadistico_chi2_embotelladora
# Valor crítico Chi-cuadrado: valor_chi2_critico_embotelladora
print(f"Estadístico de prueba χ² ({estadistico_chi2_embotelladora:.3f}) vs Valor crítico χ² ({valor_chi2_critico_embotelladora:.3f})")

if estadistico_chi2_embotelladora >= valor_chi2_critico_embotelladora:
    decision_estadistica_critico_embotelladora = "Rechazar H0"
else:
    decision_estadistica_critico_embotelladora = "No rechazar H0"

print(f"Decisión basada en el valor crítico: {decision_estadistica_critico_embotelladora}")

# 2. Comparar el valor p con alpha
# Valor p: valor_p_embotelladora
# Alpha: alpha_embotelladora
print(f"\nValor p ({valor_p_embotelladora:.4f}) vs Alpha ({alpha_embotelladora:.2f})")

if valor_p_embotelladora <= alpha_embotelladora:
    decision_estadistica_pvalue_embotelladora = "Rechazar H0"
else:
    decision_estadistica_pvalue_embotelladora = "No rechazar H0"

print(f"Decisión basada en el valor p: {decision_estadistica_pvalue_embotelladora}")

# 3. Interpretar la decisión en el contexto del problema
print("\nInterpretación en el contexto del problema:")

if decision_estadistica_pvalue_embotelladora == "Rechazar H0":
    print(f"Dado que el valor p ({valor_p_embotelladora:.4f}) es menor o igual que el nivel de significancia alpha ({alpha_embotelladora:.2f}),")
    print("rechazamos la hipótesis nula (H0).")
    print(f"Hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_embotelladora*100}%,")
    print("para concluir que la varianza poblacional del llenado de botellas es mayor a 1.2 ml^2.")
else:
    print(f"Dado que el valor p ({valor_p_embotelladora:.4f}) es mayor que el nivel de significancia alpha ({alpha_embotelladora:.2f}),")
    print("no rechazamos la hipótesis nula (H0).")
    print(f"No hay evidencia estadísticamente significativa, con un nivel de significancia del {alpha_embotelladora*100}%,")
    print("para concluir que la varianza poblacional del llenado de botellas es mayor a 1.2 ml^2.")
    print("La evidencia de la muestra no es lo suficientemente fuerte para refutar la afirmación de que la varianza es 1.2 ml^2.")

"""## Establecer el nivel de significancia

### Subtask:
Identificar el valor de alpha (α) dado en el problema.

## Establecer el nivel de significancia

### Subtask:
Identificar el valor de alpha (α) dado en el problema.
"""



"""## Establecer el nivel de significancia

### Subtask:
Identificar el valor de alpha (α) dado en el problema.
"""

#punto 33 - Hipótesis para la varianza del grosor de piezas metálicas

# Definir las hipótesis
# Problema: La fábrica sostiene que la varianza en el grosor de piezas metálicas es de al menos σ^2 = 0.5 mm^2.
# Queremos probar si la varianza poblacional es menor que la garantizada (menor a 0.5 mm^2).

# Hipótesis Nula (H0): La varianza poblacional del grosor es igual a 0.5 mm^2.
# σ^2 = 0.5 (Se establece el valor límite de la afirmación)
hipotesis_nula_grosor = "H0: σ^2 = 0.5 mm^2 (La varianza poblacional del grosor es igual a 0.5 mm^2)"

# Hipótesis Alternativa (H1): La varianza poblacional del grosor es menor a 0.5 mm^2.
# σ^2 < 0.5
hipotesis_alternativa_grosor = "H1: σ^2 < 0.5 mm^2 (La varianza poblacional del grosor es menor a 0.5 mm^2)"

# Imprimir las hipótesis
print("Hipótesis para la varianza del grosor de piezas metálicas:")
print(hipotesis_nula_grosor)
print(hipotesis_alternativa_grosor)